/// <reference path="D:\Projects\Track32-UI_8-15-2017\Track32-UI\T32WebApp\JS/jquery-1.10.2.intellisense.js" />
/// <reference path="T32App.UserAPI.js" />
/// <reference path="T32App.PatientTreatment.js" />
/// <reference path="T32App.PatientHistory.js" />
/// <reference path="T32App.SlidingWindow.js" />
/// <reference path="T32App.TreatmentAPI.js" />


var User = {
    sSession: userService.GetLoginResponse()._objResponse._sSession,
    suid: userService.GetLoginResponse()._objResponse._entityDetails[0]._suidEntity,
}
var PrereqData = {
    oData: null,
    arrTreatments: null,
    arrDoctor: null,
}
var Patient = {
    oInfo: null,
    arrKVP: null,
    suid: "",
    sName: "",
    sCaseNo: "",
    sContact: "",
    sGender: "",
    jAge: 0,
    hasMedicalHistory: false,
    hasDentalHistory: false,
    oMedicalHistory: null,
    oDentalHistory: null,

    Init: function (oActivePatient) {
        try {
            this.oInfo = oActivePatient;
            this.arrKVP = SUnconcatDelimited(this.oInfo._sDelimitedInfoKVPs);
            this.suid = this.oInfo._suidEntity != undefined ? this.oInfo._suidEntity : "";
            this.sName = this.oInfo._sNameFirst + " " + this.oInfo._sNameLast;
            this.sCaseNo = this.arrKVP[0].sValue;
            this.jAge = datediff(new Date(), new Date(this.arrKVP[6].sValue.replace(/-/g, " ")))[0];
            this.hasMedicalHistory = this.arrKVP[4].sValue == "true" ? true : false;
            this.sGender = this.arrKVP[8] != undefined ? this.arrKVP[8].sValue : "-";
            this.ViewPatientInfo();
            var THIS = this;
            patientDetails.CfnGetMedicalHistory(User.sSession, User.suid, Patient.suid, function (result) {
                if (result._jResponseCode == 0) {
                    THIS.oMedicalHistory = result._objResponse._medicalHistory;
                    localStorageDetails.SetItem("_medicalHistory", JSON.stringify(result._objResponse._medicalHistory));
                    THIS.ViewAllergyStatus();
                }
                else {
                    THIS.oMedicalHistory = null;
                    THIS.ViewAllergyStatus();
                }

            });
            patientDetails.CfnGetDentalHistory(User.sSession, User.suid, Patient.suid, function (result) {
                if (result._jResponseCode == 0) {
                    THIS.oDentalHistory = result._objResponse._arrDentalHistory;
                }
                else {
                    THIS.oDentalHistory = null;
                }
            });
        } catch (e) {
            RedirectToPage("T32PatientList.aspx");
        }
    },
    ViewAllergyStatus: function () {
        $("#elAllergyStatus").next().remove();
        var arrMedicines = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrMedicines;
        fillDropdownFromArray(arrMedicines, "selMedicine");
        $("#selMedicine").multipleSelect();
        allergy.CfnGetMedicineAllergy(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                var arrMedicineAllergy = result._objResponse._arrAllergicMedicines;
                var elDropdownMenu = $('<div class="dropdown-menu"></div>');
                var elBtnAddAllergy = $('<a class="dropdown-item" href="#" title="Add Allergic Medicine">\
									<strong style="text-decoration:underline">Add Allergy</strong>\
									<i class="icon-plus pull-right" style="padding-top:3px"></i></a>')
										.click(function () {
										    $("#txtAllergy-tokenfield").val("");
										    $("#selMedicine").multipleSelect("setSelects", []);
										    $("#dlgCreateMedicineAllergyMap").modal("show");
										});
                $(elDropdownMenu).append(elBtnAddAllergy);

                for (var i = 0; i < arrMedicineAllergy.length; i++) {
                    var elDeleteAllergicMedicine = $('<i class="icon-trash pull-right" style="padding-top:3px" title="Delete"></i>')
														.click(function () {
														    var sAllergySuid = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrAllergies[0]._suid;

														    var arrElAllAllergicMedicines = $(document).find("#elAllergyStatus").next().find(".dropdown-item");
														    var suidAllergicMed = $(this).closest("a").attr("suidMedicine");
														    var arrAllAllergicMedicines = arrElAllAllergicMedicines.map(function (j, elMed) {
														        if (j != 0) {
														            if ($(elMed).attr("suidMedicine") != suidAllergicMed) {
														                var arr = [];
														                arr.push($(elMed).attr("suidMedicine"), sAllergySuid);
														                var arrSKVP = SConcatWithSuitebleDelim(arr);
														                return arrSKVP;
														            }
														        }
														    });
														    var skvpMedicineAllergy = SConcatWithSuitebleDelim(arrAllAllergicMedicines);
														    allergy.CfnAddMedicineAllergy(User.sSession, User.suid, Patient.suid, skvpMedicineAllergy, function (result) {
														        if (result._jResponseCode == 1) {
														        }
														        else if (result._jResponseCode == 0) {
														            localStorageDetails.SetItem("_medicalHistory", JSON.stringify(result._objResponse._medicalHistory));
														            Patient.oMedicalHistory = result._objResponse._medicalHistory;
														            patientDetails.CfnGetMedicalHistory(User.sSession, User.suid, Patient.suid, function (result) {
														                if (result._jResponseCode == 0) {
														                    Patient.oMedicalHistory = result._objResponse._medicalHistory;
														                    Patient.ViewAllergyStatus();
														                    ViewMedicalHistoryTimeline();
														                    $("#dlgCreateMedicineAllergyMap").modal("hide");
														                }
														                else {
														                    Patient.oMedicalHistory = null;
														                    Patient.ViewAllergyStatus();
														                    ViewMedicalHistoryTimeline();
														                    $("#dlgCreateMedicineAllergyMap").modal("hide");
														                }

														            });
														            $("#divFormMedicalHistory").hide();
														            $("#divPatientHistory").show();
														            T32App.Utility.MasterDataAlert("Updated Successfully", "success", 4000);
														        }
														    });
														});
                    $(elDropdownMenu).append($('<a class="dropdown-item" href="#" suidMedicine="' +
						arrMedicineAllergy[i]._suidMedicine + '">' + arrMedicineAllergy[i]._sMedicine + '</a>').append(elDeleteAllergicMedicine));
                }
                $("#elAllergyStatus").append(elDropdownMenu);
                $("#elAllergyStatus").parent().append(elDropdownMenu);
                if (arrMedicineAllergy.length != 0) {
                    $("#elAllergyStatus").removeClass("no-allergy").addClass("allergy");
                    $("#elAllergyStatus").find("span").remove(); $("#elAllergyStatus").prepend("<span class=''>Allergy</span>");
                    $("#elAllergyStatus").find("span").addClass("danger");
                    $("#elAllergyStatus").find("div").addClass("tag-glow border-danger danger");
                    var medLength = 0;
                    if (arrMedicineAllergy.length != 0) {
                        medLength = arrMedicineAllergy.length;
                    }
                    $("#elAllergyStatus .dangerAllergy").html(medLength);
                }
                else {
                    $("#elAllergyStatus").removeClass("allergy").addClass("no-allergy");
                    $("#elAllergyStatus").find("span").remove(); $("#elAllergyStatus").prepend("<span class='icon-plus'>Add Allergy</span>");
                    $("#elAllergyStatus").find("span").removeClass("danger");
                    $("#elAllergyStatus").find("div").removeClass("tag-glow border-danger danger");
                    var medLength = 0;
                    if (arrMedicineAllergy.length != 0) {
                        medLength = arrMedicineAllergy.length;
                    }
                    $("#elAllergyStatus .dangerAllergy").html(medLength);
                }

            }
        });
    },
    ViewPatientInfo: function () {
        $("#caseNo").html(Patient.sCaseNo);
        $("#patientName").html(Patient.sName);
        $("#genderAndAge").html(Patient.sGender + " | " + Patient.jAge + " years");
    },
    UpdatePatientInfo: function () {
        var THIS = this;
        entityDetails.CfnGetEntityProfile(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                var oPatientinfo = LoadAllRecordsNew();
                THIS.sName = oPatientinfo.sName;
                THIS.sCaseNo = oPatientinfo.sCaseNo;
                THIS.ViewPatientInfo();
            }
        });

        patientDetails.CfnGetDentalHistory(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_dentalHistory", JSON.stringify(result._objResponse._arrDentalHistory));
            }
            else {
                localStorageDetails.SetItem("_dentalHistory", null);
            }
            treatmentDetails.CfnGetTreatmentWork(User.sSession, User.suid, Patient.suid, function (result) {
                if (result._jResponseCode == 0) {
                    localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));

                    if (result._objResponse._arrTreatmentWork.length == 0) {
                        //AddTreatmentWork();
                    }
                    else {
                        //ShowCreateTreatment();
                        //CreateTblTreatmentRecords();
                    }
                }
                else {
                    localStorageDetails.SetItem("_arrTreatmentWork", null);
                    //T32App.SessionStorage.SetItem("_arrTreatmentRecords", null);
                }
                if (result._jResponseCode == 0) {
                    //T32App.SessionStorage.SetItem("_dentalHistory", JSON.stringify(result._objResponse._arrDentalHistory));
                    
                }
                else {
                    //T32App.SessionStorage.SetItem("_dentalHistory", null);
                    //ShowDentalHistoryDetails();
                }
            });
        });

        patientDetails.CfnGetMedicalHistory(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 1) {
                localStorageDetails.SetItem("_medicalHistory", null);
                $("#btnShowTreatmentMedicalHistory").removeClass("list-group-item-danger");
            }
            else if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_medicalHistory", JSON.stringify(result._objResponse._medicalHistory));

                var _medicalHistory = result._objResponse._medicalHistory;
                HighlightMedicalHistory(_medicalHistory);
            }
            else {
                var r = result;
            }
        });
    }
}
// while adding Treatment
var TotalAdviceAmountCounter = {
    amnt: 0,
    Init: function () {
        this.amnt = 0;
        $("#txtTotalAmntInAdvicePage .amnt").html("0");
    },
    UpdateAmntADD: function (amnt) {
        this.amnt += Number(amnt);
        $("#txtTotalAmntInAdvicePage .amnt").html(this.amnt);
    },
    UpdateAmntSUB: function (amnt) {
        this.amnt -= Number(amnt);
        $("#txtTotalAmntInAdvicePage .amnt").html(this.amnt);
    },
    UpdateTotalTreatmentWorkAmount: function () {
        var arrAllTreatmentWorks = $("#divAddedTreatments").find(".divListItemTreatmentWork");
        var totalAmnt = 0;
        for (var j = 0; j < arrAllTreatmentWorks.length; j++) {
            var totalCostPerAdvice = Number($(arrAllTreatmentWorks[j]).find(".totalCostPerAdvice").text());
            totalAmnt += totalCostPerAdvice;
        }
        $("#txtTotalAmntInAdvicePage .amnt").html(totalAmnt);
    }
}

var Treatment = {
    suidWork: "",
    oWork: null,
    suidRecord: "",
    oRecord: null,
    oAttachment: null,
    oPayment: null,

    Init: function () {
        this.SetWork();
        this.SetRecord();
    },
    SetWork: function () {
        var THIS = this;
        treatmentDetails.CfnGetTreatmentWork(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));
                var arrTreatmentWork = result._objResponse._arrTreatmentWork;
                if (arrTreatmentWork.length > 0 && arrTreatmentWork != null) {
                    for (var i = 0; i < arrTreatmentWork.length; i++) {
                        var suidTreatmentWork = arrTreatmentWork[i]._suid;
                        var sDate = arrTreatmentWork[i]._sDtTreatment;
                        var suidTreatment = arrTreatmentWork[i]._suidTreatmentMaster;
                        var sTeeth = arrTreatmentWork[i]._sTeeth;
                        var suidDoctor = arrTreatmentWork[i]._suidDoctor;
                        var dAmount = arrTreatmentWork[i]._dAmount;
                        var dBillAmount = arrTreatmentWork[i]._dBillAmount;

                        var dBalanceAmount = arrTreatmentWork[i]._dBalanceAmount;
                        var jTreatmentWork = arrTreatmentWork[i]._jTreatmentWork;
                        var arrTreatmentRecord = arrTreatmentWork[i]._treatmentRecord;
                        var sSurfaces = arrTreatmentWork[i]._sSurfaces;
                        var sTreatment = "";
                        var sTreatmentShortCode = "";
                        var sDoctorName = "";
                        var jStatusBit = arrTreatmentWork[i]._jStatusBit;

                        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                        var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
                        var arrDoctors = arrPrerequisiteData._arrDoctors;
                        for (var jTreatmentMaster = 0; jTreatmentMaster < arrTreatmentMaster.length; jTreatmentMaster++) {
                            if (suidTreatment == arrTreatmentMaster[jTreatmentMaster]._suid) {
                                sTreatment = arrTreatmentMaster[jTreatmentMaster]._sName;
                                sTreatmentShortCode = arrTreatmentMaster[jTreatmentMaster]._sShortCode;
                                break;
                            }
                        }
                        for (var jDoctor = 0; jDoctor < arrDoctors.length; jDoctor++) {
                            if (suidDoctor == arrDoctors[jDoctor]._suid) {
                                sDoctorName = "Dr. " + arrDoctors[jDoctor]._sNameFirst + " " + arrDoctors[jDoctor]._sNameLast;
                                break;
                            }
                        }
                        var oTreatmentWorkDetails = {
                            suidTreatmentWork: suidTreatmentWork,
                            sDate: sDate,
                            suidTreatment: suidTreatment,
                            sTreatment: sTreatment,
                            sTreatmentShortCode: sTreatmentShortCode,
                            sTeeth: sTeeth,
                            suidDoctor: suidDoctor,
                            sDoctorName: sDoctorName,
                            dAmount: dAmount,
                            dBillAmount: dBillAmount,

                            dBalanceAmount: dBalanceAmount,
                            jTreatmentWork: jTreatmentWork,
                            sSurfaces: sSurfaces,
                            arrTreatmentRecord: arrTreatmentRecord
                        };
                        THIS.oWork = oTreatmentWorkDetails;
                    }
                }
            }
            else if (result._jResponseCode == 1) {

            }
        });
    },
    SetRecord: function (suidWork) {
        treatmentDetails.CfnGetTreatmentRecords(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {

            }
            else if (result._jResponseCode == 1) {

            }
        });
    },
    GetWork: function () {
        return this.oWork;
    },
    GetRecord: function (suidWork) {
        return this.oRecord;
    },
    GetRecordForWork: function (suidWork) {

    },
    GetDoctor: function (suidTreatmentWork) {

    },
    UpdateTreatment: function () {
        this.SetWork();
        this.SetRecord();
    }
}

var Prescription = {
    Init: function () {
        $("#divTblPrescriptionTemplates").hide();
        $("#divTblPreviousPrescriptions").hide();
        $("#divFormPrescribeMedicine").show();
        $(".TemplateInfo").hide();
        $("#chkCreateTemplate").prop("checked", false);
        $("#suidPrescriptionTemplate").val("");
        $("#txtCreatePrescriptionTemplate").val("");
        $("#txtPrescriptionTemplateOrder").val("");
        var arrDoctors = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrDoctors;
        fillDoctorComboFromArrayMultiSelect(arrDoctors, "selPrescriptionTemplateDoctor");
        $("#selPrescriptionTemplateDoctor").multipleSelect();
        $("#selPrescriptionTemplateDoctor").multipleSelect("setSelects", []);
        $("#btnAddPrescriptionRow").addClass("DISABLED").attr("disabled", true);
        $(".tblPrescription").find("table tbody").empty().append(Prescription.elRow());
        prescription.CfnGetPrescriptions(User.sSession, User.suid, Patient.suid, function (resultGetPrescriptions) {
            if (resultGetPrescriptions._jResponseCode == 0) {
                localStorageDetails.SetItem("_arrPrescriptions", JSON.stringify(resultGetPrescriptions._objResponse._arrPrescriptions));
            }
        });
    },
    elRow: function () {
        var THIS = this;
        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
        var arrMedicines = arrPrerequisiteData._arrMedicines;
        var arrMedicineTypes = arrPrerequisiteData._arrMedicineTypes;
        var objMedicine = {}

        var elTdMedicineType = $("<td class='medicineType'></td>").css("text-align", "center")
        var elMedicineType = $("<select class='form-control-multiselect custom-select dropdown'></select>")
							 .append("<option disabled='disabled' selected>Medicine Type</option>")
							 .append($.map(arrMedicineTypes, function (medType) {
							     return $("<option></option>").val(medType._sName).html(medType._sName).attr("suidMedicineType", medType._suid)
							 }))
							 .on('change', function () {
							     //$(this).closest("tr").find(".medicine select").remove()
							     //$(this).closest("tr").find(".instruction").html("-")
							     //$(this).closest("tr").find(".units").html("-")
							     var oElMedicineType = $(this)
							     oElMedicineType.closest("tr").find(".medicine").html("").append(elMedicine.html("")
									 .append("<option disabled='disabled' selected>Medicine</option>")
									 .append(
										$.map(arrMedicines, function (med) {
										    if ($('option:selected', oElMedicineType).attr("suidMedicineType") == med._suidMedicineType) {
										        return $('<option></option>').text(med._sName).attr("suidMedicine", med._suid)
										    }
										})
									 ).on('change', function () {
									     var oElMedicine = $(this);
									     $.each(arrMedicines, function (j, med) {
									         $("#btnAddPrescriptionRow").removeClass("DISABLED").attr("disabled", false);
									         if ($("option:selected", oElMedicine).attr("suidMedicine") == med._suid) {
									             THIS.CheckWhetherSelectedMedicineIsAllergic(med);
									             oElMedicine.closest("tr").find(".instruction").html("").append(elInstruction)
									             oElMedicine.closest("tr").find(".units").html("").append(elUnits.val(med._sUnitsPerDose))
									             oElMedicine.closest("tr").find(".dosage").html("").append(elDosage
                                                     .append(
                                                        $.map(T32App.T32LIB.Utility.DOSE_TYPE, function (j, type) {
                                                            var sOption = "";
                                                            if (type == "BIT_MORNING") {
                                                                sOption = "Morning";
                                                            }
                                                            else if (type == "BIT_AFTERNOON") {
                                                                sOption = "Afternoon";
                                                            }
                                                            else if (type == "BIT_EVENING") {
                                                                sOption = "Evening";
                                                            }
                                                            else if (type == "BIT_NIGHT") {
                                                                sOption = "Night";
                                                            }
                                                            if (sOption != "") {
                                                                return $("<option/>").attr("value", j).html(sOption)
                                                            }
                                                        })
                                                      )
                                                 )
									             oElMedicine.closest("tr").find(".schedule").html("").append(elSchedule
                                                     .append(
                                                        $.map(T32App.T32LIB.Utility.DOSE_PRIORITY, function (j, priority) {
                                                            var sPriority = "";
                                                            if (priority == "BIT_BEFORE_MEAL") {
                                                                sPriority = "Before Meal"
                                                            } else if (priority == "BIT_AFTER_MEAL") {
                                                                sPriority = "After Meal"
                                                            }
                                                            return $("<option></option>").attr("value", j).html(sPriority)
                                                        })
                                                     ))
									             oElMedicine.closest("tr").find(".days").html("").append(elDays.val("1"))
									             oElMedicine.closest("tr").find(".totalDose").html("").append(elTotalDose.text("0"))
									             oElMedicine.closest("tr").find(".remove").html("").append(elRemove)
									         }
									     })
									 })
								 )
							 })

        var elTdMedicine = $("<td class='medicine'></td>").css("text-align", "center")
        var elMedicine = $("<select class='form-control-multiselect custom-select dropdown'></select>")

        var elTdInstruction = $("<td class='instruction'></td>").css("text-align", "center")
        var elInstruction = $("<input class='form-control' type='text'/>");

        var elTdUnits = $("<td class=units></td>").css("text-align", "center")
        var elUnits = $("<input class='form-control' type='number' min='0.5' step='0.5' style='width:66px;margin-right:0'/>")
					  .on("change", function () {
					      var jUnits = Number($(this).closest("tr").find(".units input").val())
					      var jDosage = 1//$(this).closest("tr").find("dosage select")//getSelects
					      var jDays = Number($(this).closest("tr").find(".days input").val())
					      if (false) {
					          jTotalUnits = jUnits;
					      }
					      else {
					          jTotalUnits = jUnits * jDosage * jDays;
					      }

					      $(this).closest("tr").find(".totalDose").html(jTotalUnits)
					  })


        var elTdDosage = $("<td class='dosage'></td>").css("text-align", "center")
        var elDosage = $("<select class='form-control-multiselect custom-select' id=''></select>")


        var elTdSchedule = $("<td class='schedule'></td>").css("text-align", "center")
        var elSchedule = $("<select class='form-control-multiselect custom-select'></select>");

        var elTdDays = $("<td class='days'></td>").css("text-align", "center")
        var elDays = $("<input class='form-control' type='number' min='1' style='width:65px;margin-right:0'/>")
					 .on("change", function () {
					     var jUnits = Number($(this).closest("tr").find(".units input").val())
					     var jDosage = 1//$(this).closest("tr").find("dosage select")//getSelects
					     var jDays = Number($(this).closest("tr").find(".days input").val())
					     if (false) {
					         jTotalUnits = jUnits;
					     }
					     else {
					         jTotalUnits = jUnits * jDosage * jDays;
					     }

					     $(this).closest("tr").find(".totalDose").html(jTotalUnits)
					 })

        var elTdTotalDose = $("<td class='totalDose'></td>").css("text-align", "center")
        var elTotalDose = $("<label'></label>")

        var elTdRemove = $("<td class='remove'></td>").css("text-align", "centre")
        var elRemove = $('<button class="btn btn-outline-danger" style="padding: 3px; border-radius: 3px;margin-left:15px" id="btnDeletePrescriptionRow">\
										<i class="fa fa-trash-o" style="margin-right:0"></i>\
						</button>')
					   .on('click', function () {
					       $(this).closest("tr").remove()
					   });

        var elRow = $("<tr></tr>")
        elRow.append(elTdMedicineType.append(elMedicineType))
			 .append(elTdMedicine.html("-"))
			 .append(elTdInstruction.html("-"))
			 .append(elTdUnits.html("-"))
			 .append(elTdDosage.html("-"))
			 .append(elTdSchedule.html("-"))
			 .append(elTdDays.html("-"))
			 .append(elTdTotalDose.html("-"))
			 .append(elTdRemove)

        return elRow;
    },
    AddRow: function () {
        $("#btnAddPrescriptionRow").addClass("DISABLED").attr("disabled", true);// class DISABLED in T32CustomStyle
        $(".tblPrescription").find("table tbody").append(this.elRow());
    },
    EditRow: function (row) {

        $("#chkCreateTemplate").hide();
        $("#btnAddPrescriptionRow").removeClass("DISABLED").attr("disabled", false);
        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
        if ($("#divTblPrescriptionTemplates").is(":hidden")) {
            arrPrescriptions = JSON.parse(localStorageDetails.GetItem("_arrPrescriptions"));
        }
        else {
            arrPrescriptions = arrPrerequisiteData._arrPrescriptionTemplates;
        }
        $("#txtCreatePrescriptionTemplate").val(row.sTemplate);
        var suidPrescriptionTemplate = row.suid;
        $("#suidPrescriptionTemplate").text(suidPrescriptionTemplate);
        $("#txtPrescriptionTemplateOrder").val(row.jOrder);
        var arrDoctors = arrPrerequisiteData._arrDoctors;
        fillDoctorComboFromArray(arrDoctors, "selPrescriptionTemplateDoctor");
        $("#selPrescriptionTemplateDoctor").multipleSelect({
            filter: false,
            single: false
        });
        var arrPrescriptionDoctors = ArrSUnconcatDelimitedPlainText(row.suid);
        $("#selPrescriptionTemplateDoctor").multipleSelect("setSelects", arrPrescriptionDoctors);
        //var arrPrescriptionTemplates = arrPrerequisiteData._arrPrescriptionTemplates;
        var prescriptionTemplate = {};

        for (var jTemplate = 0; jTemplate < arrPrescriptions.length; jTemplate++) {
            if (suidPrescriptionTemplate == arrPrescriptions[jTemplate]._suid) {
                prescriptionTemplate = arrPrescriptions[jTemplate];
                break;
            }
        }

        var arrMedicines = arrPrerequisiteData._arrMedicines;
        var arrMedicineTypes = arrPrerequisiteData._arrMedicineTypes;
        var arrPrescriptionContents = prescriptionTemplate._arrPrescriptionContents;

        $(".tblPrescription").find("table tbody").remove();
        $(".tblPrescription").find("table").append($("<tbody></tbody>"));
        for (var jRow = 0; jRow < arrPrescriptionContents.length; jRow++) {
            var suidMedicineType = arrPrescriptionContents[jRow]._suidMedicineType;
            var suidMedicine = arrPrescriptionContents[jRow]._suidMedicine;
            var instr = arrPrescriptionContents[jRow]._sNote;
            var units = arrPrescriptionContents[jRow]._sUnitsPerDose;
            var dosage = arrPrescriptionContents[jRow]._sDoseType;
            var schedule = arrPrescriptionContents[jRow]._jDosePriority;
            var days = arrPrescriptionContents[jRow]._jDays;
            var totalDose = arrPrescriptionContents[jRow]._jTotalUnits;

            var elTdMedicineType = $("<td class='medicineType'></td>").css("text-align", "center")
            var elMedicineType = $("<select class='form-control-multiselect custom-select dropdown'></select>")
								 .append("<option selected>Medicine Type</option>")
								 .append($.map(arrMedicineTypes, function (medType) {
								     return $("<option value=" + medType._suid + ">" + medType._sName + "</option>").attr("suidMedicineType", medType._suid)
								 }))
								 .on('change', function () {
								     var oElMedicineType = $(this)
								     oElMedicineType.closest("tr").find(".medicine").html("").append(elMedicine.html("")
										 .append("<option selected>Medicine</option>")
										 .append(
											$.map(arrMedicines, function (med) {
											    if ($('option:selected', oElMedicineType).attr("suidMedicineType") == med._suidMedicineType) {
											        return $("<option value=" + med._suid + ">" + med._sName + "</option>").attr("suidMedicine", med._suid)
											    }
											})
										 )
									 ).on('change', function () {
									     var oElMedicine = $(this)
									     $.each(arrMedicines, function (j, med) {
									         if ($("option:selected", oElMedicine).attr("suidMedicine") == med._suid) {
									             oElMedicine.closest("tr").find(".instruction").html("").append(elInstruction)
									             oElMedicine.closest("tr").find(".units").html("").append(elUnits.val(med._sUnitsPerDose))
									             oElMedicine.closest("tr").find(".dosage").html("").append(elDosage
                                                     .append(
                                                        $.map(T32App.T32LIB.Utility.DOSE_TYPE, function (j, type) {
                                                            var sOption = "";
                                                            if (type == "BIT_MORNING") {
                                                                sOption = "Morning";
                                                            }
                                                            else if (type == "BIT_AFTERNOON") {
                                                                sOption = "Afternoon";
                                                            }
                                                            else if (type == "BIT_EVENING") {
                                                                sOption = "Evening";
                                                            }
                                                            else if (type == "BIT_NIGHT") {
                                                                sOption = "Night";
                                                            }
                                                            if (sOption != "") {
                                                                return $("<option/>").attr("value", j).html(sOption)
                                                            }
                                                        })
                                                      )
                                                 )
									             oElMedicine.closest("tr").find(".schedule").html("").append(elSchedule
                                                     .append(
                                                        $.map(T32App.T32LIB.Utility.DOSE_PRIORITY, function (j, priority) {
                                                            var sPriority = "";
                                                            if (priority == "BIT_BEFORE_MEAL") {
                                                                sPriority = "Before Meal"
                                                            } else if (priority == "BIT_AFTER_MEAL") {
                                                                sPriority = "After Meal"
                                                            }
                                                            return $("<option></option>").attr("value", j).html(sPriority)
                                                        })
                                                     ))
									             oElMedicine.closest("tr").find(".days").html("").append(elDays.val("1"))
									             oElMedicine.closest("tr").find(".totalDose").html("").append(elTotalDose.text("0"))
									             oElMedicine.closest("tr").find(".remove").html("").append(elRemove)
									         }
									     })
									 })
								 });

            $(elMedicineType).val(suidMedicineType);
            var elTdMedicine = $("<td class='medicine'></td>").css("text-align", "center")
            var elMedicine = $("<select class='form-control-multiselect custom-select dropdown'></select>")
								.append("<option selected>Medicine</option>")
								.append(
									$.map(arrMedicines, function (med) {

									    return $("<option value=" + med._suid + ">" + med._sName + "</option>").attr("suidMedicine", med._suid)

									})
								)

            $(elMedicine).val(suidMedicine);

            var elTdInstruction = $("<td class='instruction'></td>").css("text-align", "center")
            var elInstruction = $("<input class='form-control' type='text'/>").val(instr);

            var elTdUnits = $("<td class=units></td>").css("text-align", "center")
            var elUnits = $("<input class='form-control' type='number' min='0.5' step='0.5' style='width:66px;margin-right:0'/>")
						  .on("change", function () {
						      var jUnits = Number($(this).closest("tr").find(".units input").val())
						      var jDosage = 1//$(this).closest("tr").find("dosage select")//getSelects
						      var jDays = Number($(this).closest("tr").find(".days input").val())
						      if (false) {
						          jTotalUnits = jUnits;
						      }
						      else {
						          jTotalUnits = jUnits * jDosage * jDays;
						      }

						      $(this).closest("tr").find(".totalDose").html(jTotalUnits)
						  })
            elUnits.val(units)

            var elTdDosage = $("<td class='dosage'></td>").css("text-align", "center")
            var elDosage = $("<select class='form-control-multiselect custom-select' id=''></select>")
							.append(
									$.map(T32App.T32LIB.Utility.DOSE_TYPE, function (j, type) {
									    var sOption = "";
									    if (type == "BIT_MORNING") {
									        sOption = "Morning";
									    }
									    else if (type == "BIT_AFTERNOON") {
									        sOption = "Afternoon";
									    }
									    else if (type == "BIT_EVENING") {
									        sOption = "Evening";
									    }
									    else if (type == "BIT_NIGHT") {
									        sOption = "Night";
									    }
									    if (sOption != "") {
									        return $("<option/>").attr("value", j).html(sOption)
									    }
									})
							)
            switch (dosage) {
                case 1:
                    elDosage.val(dosage);
                    break;
                case 2:
                    elDosage.val(dosage);
                    break;
                case 4:
                    elDosage.val(dosage);
                    break;
                case 8:
                    elDosage.val(dosage);
                    break;
            }

            var elTdSchedule = $("<td class='schedule'></td>").css("text-align", "center")
            var elSchedule = $("<select class='form-control-multiselect custom-select'></select>")
				.append(
						$.map(T32App.T32LIB.Utility.DOSE_PRIORITY, function (j, priority) {
						    var sPriority = "";
						    if (priority == "BIT_BEFORE_MEAL") {
						        sPriority = "Before Meal"
						    } else if (priority == "BIT_AFTER_MEAL") {
						        sPriority = "After Meal"
						    }
						    return $("<option></option>").attr("value", j).html(sPriority)
						})
				)

            var elTdDays = $("<td class='days'></td>").css("text-align", "center")
            var elDays = $("<input class='form-control' type='number' min='1' style='width:65px;margin-right:0'/>")
						 .on("change", function () {
						     var jUnits = Number($(this).closest("tr").find(".units input").val())
						     var jDosage = 1//$(this).closest("tr").find("dosage select")//getSelects
						     var jDays = Number($(this).closest("tr").find(".days input").val())
						     if (false) {
						         jTotalUnits = jUnits;
						     }
						     else {
						         jTotalUnits = jUnits * jDosage * jDays;
						     }

						     $(this).closest("tr").find(".totalDose").html(jTotalUnits)
						 })
            elDays.val(days)

            var elTdTotalDose = $("<td class='totalDose'></td>").css("text-align", "center")
            var elTotalDose = $("<label'></label>").text(totalDose)

            var elTdRemove = $("<td class='remove'></td>").css("text-align", "centre")
            var elRemove = $('<button class="btn btn-outline-danger" style="padding: 3px; border-radius: 3px;margin-left:15px" id="btnDeletePrescriptionRow">\
										<i class="fa fa-trash-o" style="margin-right:0"></i>\
						</button>')
						   .on('click', function () {
						       $(this).closest("tr").remove()
						   });

            var elRow = $("<tr></tr>")
            elRow.append(elTdMedicineType.append(elMedicineType))
				 .append(elTdMedicine.append(elMedicine))
				 .append(elTdInstruction.append(elInstruction))
				 .append(elTdUnits.append(elUnits))
				 .append(elTdDosage.append(elDosage))
				 .append(elTdSchedule.append(elSchedule))
				 .append(elTdDays.append(elDays))
				 .append(elTdTotalDose.append(elTotalDose))
				 .append(elTdRemove.append(elRemove))


            $(".tblPrescription").find("table tbody").append(elRow);
            $("#divTblPreviousPrescriptions").hide();
            $("#divFormPrescribeMedicine").show();
        }
    },
    CheckWhetherSelectedMedicineIsAllergic: function (med) {
        allergy.CfnGetMedicineAllergy(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                var arrMedicineAllergy = result._objResponse._arrAllergicMedicines;
                for (var j = 0; j < arrMedicineAllergy.length; j++) {
                    if (arrMedicineAllergy[j]._suidMedicine == med._suid) {
                        T32App.Utility.MasterDataAlert("Mr. " + Patient.sName + " is allergic to '" + med._sName + "'", "warning", 3000);
                    }
                }
            }
        });
        var med = med;
    },
}

var LabWork = {
    Init: function () {
        var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
        var lFilter = lib.Utility.ENTITYTYPE.BIT_PERSON | lib.Utility.ENTITYTYPE.BIT_LAB;
        labWork.CfnGetLabDetails(User.sSession, User.suid, lFilter, function (result) {
            var arrLabs = JSON.parse(localStorageDetails.GetItem("T32LabResp"))._objResponse._aei;
            fillLabCombo(arrLabs, "selLab");
        });
        labWork.CfnGetJobDetailsByEntity(User.sSession, User.suid, Patient.suid, function (result) {
            localStorageDetails.SetItem("_arrLabDetails", result._objResponse._ajd);
            var arrLabWork = result._objResponse._ajd;
            var arrTblData = [];
            for (var j = 0; j < arrLabWork.length; j++) {
                var diff = [];
                var dtToday = new Date();
                var dtDOB = new Date(arrLabWork[j]._sDOBPatient.replace("-", " "));
                diff = datediff(dtToday, dtDOB);

                var jAge = diff[0];
                var oLabDetails = {
                    srno: j + 1,
                    suidJob: arrLabWork[j]._suid,
                    suidLab: arrLabWork[j]._suidLab,
                    suidPatient: arrLabWork[j]._suidPatient,
                    sCaseNo: arrLabWork[j]._nCaseNo,
                    sPatientName: arrLabWork[j]._sPatientname,
                    sDOBPatient: arrLabWork[j]._sDOBPatient,
                    sPatientMobileNumber: arrLabWork[j]._sPatientMobileNumber,
                    sLabName: arrLabWork[j]._sLabName,
                    sLabContactNumber: arrLabWork[j]._sLabContactNumber,
                    sJobType: arrLabWork[j]._sJobType,
                    jJobType: arrLabWork[j]._jJobType,
                    sTeeth: GetGraphicalRepresentationOfTeethForTreatment(arrLabWork[j]._sTeeth.split(','), jAge),
                    sDescription: arrLabWork[j]._sDescription,
                    sJobStatus: arrLabWork[j]._sJobStatus,
                    jJobStatus: arrLabWork[j]._jJobStatus,
                    dAmount: arrLabWork[j]._dAmount,
                    dtJobTaken: arrLabWork[j]._dtJobTaken,
                    dtJobExpected: arrLabWork[j]._dtJobExpected,
                    dtJobCompleted: arrLabWork[j]._dtJobComplited,
                }
                arrTblData.push(oLabDetails);
            }
            if ($.fn.DataTable.isDataTable('#tblJobs')) {
                $('#tblJobs').DataTable().destroy();
            }

            var newHeight = $(window).height() - ($("#navHeader").height()) - 150;
            newHeight = newHeight - 150;

            $('#tblJobs tbody').empty();

            $("#tblJobs").DataTable({
                destroy: true,
                scrollY: newHeight,
                "aaData": arrTblData,
                "bPaginate": true,
                "bInfo": true,
                "pagingType": "full_numbers",
                "iDisplayLength": 10,
                "ordering": true,
                "autoWidth": false,
                "bLengthChange": false,
                "bFilter": true,
                "language": {
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    }
                },
                "aoColumns": [
					 {
					     "sTitle": "Sr. No.",
					     "mDataProp": "srno",
					 },
					{
					    "sTitle": "Suid",
					    "mDataProp": "suidJob",
					    "visible": false
					},
					{
					    "sTitle": "suidLab",
					    "mDataProp": "suidLab",
					    "visible": false
					},
					{
					    "sTitle": "Case No",
					    "mDataProp": "sCaseNo",
					    "visible": false
					},
					{
					    "sTitle": "Patient Name",
					    "mDataProp": "sPatientName",
					    "visible": false
					},
					{
					    "sTitle": "sDOBPatient",
					    "mDataProp": "sDOBPatient",
					    "visible": false
					},
					 {
					     "sTitle": "Patient Mob. No.",
					     "mDataProp": "sPatientMobileNumber",
					     mRender: function (data, type, row) {
					         if (data != "") {
					             return '<span>' + data + '</span>';
					         } else {
					             return '-';
					         }
					     },
					     "visible": false
					 },
					  {
					      "sTitle": "Date",
					      "mDataProp": "dtJobTaken",
					  },
					  {
					      "sTitle": "Expected Delivery",
					      "mDataProp": "dtJobExpected",
					  },
					  {
					      "sTitle": "Completion Date",
					      "mDataProp": "dtJobCompleted",
					      "visible": false
					  },
					  {
					      "sTitle": "Job Type",
					      "mDataProp": "sJobType",
					  },
					   {
					       "sTitle": "Selected Teeth",
					       "mDataProp": "sTeeth",
					   },
					   {
					       "sTitle": "Description",
					       "mDataProp": "sDescription",
					   },
					   {
					       "sTitle": "Lab Name",
					       "mDataProp": "sLabName",
					   },
					   {
					       "sTitle": 'Action',
					       "mDataProp": 'action',
					       class: "dt-center",
					       width: '5%',
					       "sortable": false,
					       mRender: function (data, type, row) {
					           if (row.sJobStatus == "Done") {
					               return ['<i class="icon-edit2 btn-icon-edit"></i>'];
					           }
					           else {
					               return ['<a class="EditJob btn-icon-edit" title="Edit Job" href="javascript:void(0)"><i class="icon-edit2"></i></a>'];
					           }
					       }
					   }
                ],
            });
            $(".dataTables_scrollHeadInner").css("width", "100%");
            $(".dataTable").css("width", "100%");
            $("#tblJobs_filter").hide();
            $(".dataTblSearch").keyup(function () {
                $("#tblJobs").DataTable().search(this.value).draw();
            });
            $("#tblJobs").on("click", ".EditJob", function () {
                var data = $('#tblJobs').DataTable().row($(this).parents('tr')).data();
                try {
                    $("#divTblJobs").hide();
                    $("#divFormJob").show();
                    LabWork.EditJob(data);
                } catch (e) {
                    alert(e)
                }
            });
            $("#tblJobs").on("click", ".JobDone", function () {
                var data = $('#tblPreviousPrescriptions').DataTable().row($(this).parents('tr')).data();
                try {
                } catch (e) {

                }
            });

        })
    },
    EditJob: function (row) {
        var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
        $("#txtPatientDetails").attr("disabled", "disabled")
        $("#divExpectedDeliveryDate").find(".input-group.date").datepicker({
            format: "dd-M-yyyy",
            autoclose: true
        });

        $("#dtJobDone").find(".input-group.date").datepicker({
            format: "dd-M-yyyy",
            autoclose: true
        });

        $("#dtJobDone").hide();
        $("#rdPending").attr("disabled", false);
        $("#rdDone").attr("disabled", false);
        fillDropdownFromJobTypeEnum(lib.Utility.JOBTYPE, "selJobType", row.jJobType);
        $("#rdInProgress").attr("value", [lib.Utility.JOBSTATUS.BIT_INPROGRESS]);
        $("#rdPending").attr("value", [lib.Utility.JOBSTATUS.BIT_PENDING]);
        $("#rdDone").attr("value", [lib.Utility.JOBSTATUS.BIT_DONE]);
        $("#rdRepeat").attr("value", [lib.Utility.JOBSTATUS.BIT_REPEAT]);
        $("#suidJob").val(row.suidJob);
        $("#suidPatient").val(row.suidPatient);
        $("#txtPatientDetails").val(row.sPatientName);
        $("#dtJobEntry").val(row.dtJobTaken);

        $("#dtExpectedDelivery").val(row.dtJobExpected);

        $("#dtActualDelivery").val(row.dtJobCompleted);
        $("#selLab option[value='" + row.suidLab + "']").attr("selected", "selected");
        $("#txtJobDescription").val(row.sDescription);
        $("#lblCaseNo").val(row.caseNo);
        if (row.jJobStatus == lib.Utility.JOBSTATUS.BIT_INPROGRESS) {
            $('#rdInProgress').prop('checked', true).trigger('click');
        }
        else if (row.jJobStatus == lib.Utility.JOBSTATUS.BIT_PENDING) {
            $('#rdPending').prop('checked', true).trigger('click');
        }
        else if (row.jJobStatus == lib.Utility.JOBSTATUS.BIT_DONE) {
            $('#rdDone').prop('checked', true).trigger('click');
        }
        else if (row.jJobStatus == lib.Utility.JOBSTATUS.BIT_REPEAT) {
            $('#rdRepeat').prop('checked', true).trigger('click');
        }
        var sTeeth = row.sTeeth;
        var arrTeeth = [];

        $("#lblJobHeading").text("Update Job");
        $("#txtAmount").val(row.dAmount);
        var sSession = userService.GetLoginResponse()._objResponse._sSession;
        var sEntity = userService.GetLoginResponse()._objResponse._entityDetails[0]._suidEntity;
        entityDetails.CfnGetEntityProfile(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                var arrEntity = result._objResponse;
                var dtBirth = arrEntity._sDtBirth;
                var diff = [];


                if (arrEntity != undefined) {
                    var dtToday = new Date();
                    var dtDOB = new Date(dtBirth.replace("-", " "));
                    diff = datediff(dtToday, dtDOB);
                }

                var jAge = diff[0];

                if (jAge < 6) {
                    var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                    CreateTeethStructureKids(arrChildTeeth, fShowImage, "#divTeethStructure");
                }
                else if (jAge > 12) {
                    var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                    CreateTeethStructureAdult(arrAdultTeeth, fShowImage, "#divTeethStructure");
                }
                else {
                    var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
                    var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                    CreateTeethStructureMixDentition(arrAdultTeeth, arrChildTeeth, fShowImage, "#divTeethStructure");
                }
                localStorageDetails.SetItem("patientAge", jAge);
                //TeethSelectionStructure();
                var $tblCheckedCells = $("#divTeethStructure").find("label.active");

                $tblCheckedCells = $("#divTeethStructure").find("label").removeClass("btn-warning");
                $tblCheckedCells = $("#divTeethStructure").find("label").removeClass("active");
                $tblCheckedCells = $("#divTeethStructure").find("label");
                if (jAge > 6 && jAge < 12) {
                    for (var j = 0; j < 52; j++) {
                        $label = $tblCheckedCells[j];
                        $id = $label.id;
                        var nBits = $("#" + $id).attr("toothSuids");
                        for (var nBit = 0; nBit < sTeeth.length; nBit++) {
                            if (nBits == sTeeth[nBit]) {
                                $("#" + $id).addClass("active");
                                var tblCells = $tblCheckedCells;
                                var position = $("#" + $id).attr("position");
                                var suid = $("#" + $id).attr("toothSuids");
                                var classList = $("#" + $id).className;
                                var isActive = $($(this).closest("td")).find("label.active");

                                if (tblCells.length == 52) {
                                    for (var i = 0; i < tblCells.length; i++) {
                                        var positionThis = $(tblCells[i]).attr("position");
                                        var suidThis = $(tblCells[i]).attr("toothSuids");
                                        if (position == positionThis && suid != suidThis) {
                                            $(tblCells[i]).attr("disabled", true);
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }


                }
                else {
                    for (var j = 0; j < 32; j++) {
                        $label = $tblCheckedCells[j];
                        $id = $label.id;
                        var nBits = $("#" + $id).attr("toothSuids");
                        for (var nBit = 0; nBit < sTeeth.length; nBit++) {
                            if (nBits == sTeeth[nBit]) {
                                $("#" + $id).addClass("active");
                                break;
                            }
                        }
                    }
                }
            }

        });

        $("#btnSaveJob").find("span").empty().text("Update");
    }
}

$(function () {
    window: (function Startup() {
        var respAuth = userService.GetAuthResponse();
        if (respAuth) {
            var respLogin = userService.GetLoginResponse();
            if (respLogin) {
                if (respLogin._jResponseCode === 0) {
                    var respLib = userService.GetLibResponse();
                    var respPrerequisiteData = userService.CfnGetPrerequisiteData(function () { });
                    if (respLib != undefined && respPrerequisiteData != undefined) {
                        if (respLogin._objResponse._entityDetails[0]._nBitsEntityType == 10 || respLogin._objResponse._entityDetails[0]._nBitsEntityType == 16) {
                            window.location = "Login.aspx";
                        }
                        else {
                            Init();
                        }
                    }
                    else {
                        userService.CfnAuthorize("2d5a8839-92a1-4210-acf6-20b2865923d2", "", function (data) {
                            Init();
                        });
                    }
                }

            }
            else {
                RedirectToPage("Login.aspx");
            }
        } else {

            userService.CfnAuthorize("2d5a8839-92a1-4210-acf6-20b2865923d2", "", function (data) {
                // $("#btnLogin") enable
                $("#btnLogin").attr("disabled", false).css({ cursor: "pointer" });
            });
        }

    })();
    function FillRoleCombo() {
        $("#cmbEntityRole").empty();
        var entityInfos = userService.GetLoginResponse()._objResponse._entityDetails;
        $.each(entityInfos, function (sText, oValue) {
            $("#cmbEntityRole").append($("<option/>")
							   .attr("value", JSON.stringify(oValue))
							   .text(oValue._sNameFirst + " " + oValue._sNameMiddle + " " + oValue._sNameLast));
        });

    }
    function Init() {
        $("#divAllTabPanel").show();
        $("#divAddAdvice").hide();
        FillRoleCombo();
        Patient.Init(JSON.parse(localStorageDetails.GetItem("ActivePatient")));
        $("#divPatientDashboard,#divFormPatient").find(".input-group.date").datepicker({
            format: "dd-M-yyyy",
            autoclose: true,
            todayHighlight: true,
            startDate: "today",
        });
        ViewTreatmentWorks();
    }

    /* ---------  DEFINITIONS -------------------------------------------- */
    // Advice
    function ViewTreatmentWorks() {
        $("#divTreatmentRecord").hide();
        $("#divTreatmentWork").show();
        $("#suidTreatmentWork").val("");
        $("#suidTreatmentRecord").val("");
        $("#txtBillingNote").val("");
        $("#sTeeth").val("");

        $("#divViewStarterMsg").show();
        $("#divAllTabPanel").show();
        $("#divAddAdvice").hide();
        $("#btnBackAddAdvice").hide();
        $("#btnSaveTreatmentWork").hide();
        $("#btnAddAdvice").show();
        TotalAdviceAmountCounter.Init();
        treatmentDetails.CfnGetTreatmentWork(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));
                localStorageDetails.SetItem("AdvanceAmount", result._objResponse._dAdvanceAmount);
                var arrWork = result._objResponse._arrTreatmentWork;
                var amtTotal = 0;
                for (var j = 0; j < arrWork.length; j++) {
                    amtTotal += Number(arrWork[j]._dAmount);
                }
                $("#txtTotalAdvicePayment").html("");
                $("#txtTotalAdvicePayment").append("<span><i class='fa fa-inr'></i>" + amtTotal + "<span>");
                ViewActiveTreatmentList();
            }
            else if (result._jResponseCode == 1) {

            }
        });

    }
    function InitFormTreatmentWork() {
        $("#divAddedTreatments").html("");
        $("#divTreatmentMasterList").html("");
        TotalAdviceAmountCounter.Init();
        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
        var arrDoctors = arrPrerequisiteData._arrDoctors;
        fillDoctorComboFromArray(arrDoctors, "selTreatmentWorkDoctor");
        $("#dtTreatmentWork").val(new Date().format("dd-MMM-yyyy"));
        var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
        CreateTreatmentList(arrTreatmentMaster);
        TeethSelectionStructure();
    }
    function CreateTreatmentList(arrTreatmentMaster) {
        if (arrTreatmentMaster != null) {
            if (arrTreatmentMaster.length > 0) {
                for (var i = 0; i < arrTreatmentMaster.length; i++) {
                    $li = $("<li class='list-group-item list-group-item-action' style='padding: 6px 13px'></li>");
                    $a = $("<a href='#' suid='" + arrTreatmentMaster[i]._suid + "' treatment='" + arrTreatmentMaster[i]._sName + " (" + arrTreatmentMaster[i]._sShortCode + ")' cost='" + arrTreatmentMaster[i]._initialTreatmentCost._dAmount + "' style='padding: 0.25rem 1.25rem' index='" + i + "'><span class='float-xs-right'><i class='fa fa-inr'></i>&nbsp;" + arrTreatmentMaster[i]._initialTreatmentCost._dAmount + "</span>" + arrTreatmentMaster[i]._sName + " (" + arrTreatmentMaster[i]._sShortCode + ")</a>");
                    $a.click(function () {
                        $("#txtTotalAmntInAdvicePage .amnt").html("0");
                        $("#divViewStarterMsg").hide();
                        if (!$(this).parent().hasClass("treatmentSelected")) {
                            // Create TreatmentWorkList List
                            var cost = $(this).attr("cost");
                            var selectedLI = $(this).parent();
                            $(this).parent().addClass("treatmentSelected");
                            $card = $("<div class='card divListItemTreatmentWork' id=''></div>");
                            $cardHeader = $("<div class='card-header' style='padding: 0.5rem 1rem;'></div>");
                            $treatmentName = $("<h6 class='card-title' suidTreatment='" + $(this).attr("suid") + "'>" + $(this).attr("treatment") + "</h6>");
                            $cardHeader.append($treatmentName);
                            $headingElements = $("<div class='heading-elements' style='top: 2px;'></div>");
                            $ulActions = $("<ul class='list-inline mb-0'></ul>");
                            $liRemoveTreatment = $("<li><a><i class='icon-trash' title='Remove treatment'></i></a></li>").click(function () {
                                var deletedTreatmentWork = $(this).closest(".divListItemTreatmentWork");
                                var noOfTeethSelected = $(deletedTreatmentWork).find("label.active").length;
                                var dCostPerTooth = Number($(deletedTreatmentWork).find(".costPerTooth").text());
                                var totalCostPerAdvice = Number($(deletedTreatmentWork).find(".divTotalCostPerAdvice .totalCostPerAdvice").text());
                                var dTotalAmountInSelectedAdvice = 0;
                                if (deletedTreatmentWork.find(".rdFixed").is(":checked")) {
                                    //TotalAdviceAmountCounter.UpdateAmntSUB(totalCostPerAdvice);
                                }
                                else if (deletedTreatmentWork.find(".rdTeethMultiply").is(":checked") && noOfTeethSelected == 0) {
                                    //TotalAdviceAmountCounter.UpdateAmntSUB(dCostPerTooth);
                                }
                                else if (deletedTreatmentWork.find(".rdTeethMultiply").is(":checked") && noOfTeethSelected != 0) {
                                    //TotalAdviceAmountCounter.UpdateAmntSUB(totalCostPerAdvice);
                                }
                                if ($("#divAddedTreatments").find(".divListItemTreatmentWork").length == 1) {
                                    $("#divViewStarterMsg").show();
                                    //TotalAdviceAmountCounter.Init();
                                }
                                $(selectedLI).removeClass("treatmentSelected");
                                $(this).closest(".card").remove();

                                TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                            });
                            $ulActions.append($liRemoveTreatment);
                            $headingElements.append($ulActions);
                            $cardHeader.append($headingElements);
                            $card.append($cardHeader);

                            $cardBody = $("<div class='card-body'></div>");
                            $cardBodyBlock = $("<div class='card-block' style='padding: 1rem;'></div>");
                            $cardDivBlock = $("<div class='row'></div>");
                            switch (IsAdultOrKid()) {
                                case 0:
                                    var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
                                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                                    $divForTeethStructure = $("<div class='col-xl-7 col-lg-12 mb-2 divTeethStructure_Advice' id='' style='text-align:center'>" +
                                                                    GetElTeethStructureChild(arrChildTeeth, fShowImage) +
                                                              "</div>");
                                    break;
                                case 1:
                                    var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
                                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                                    $divForTeethStructure = $("<div class='col-xl-7 col-lg-12 mb-2 divTeethStructure_Advice' id='' style='text-align:center'>" +
                                                                    GetElTeethStructureAdult(arrAdultTeeth, fShowImage) +
                                                               "</div>");
                                    break;
                                case 2:
                                    var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
                                    var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
                                    var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
                                    $divForTeethStructure = $("<div class='col-xl-7 col-lg-12 mb-2 divTeethStructure_Advice' id='' style='text-align:center;top:-43px'>" +
                                                                   GetElTeethStructureMix(arrAdultTeeth, arrChildTeeth, fShowImage) +
                                                               "</div>");
                                    break;
                                default:
                            }
                            $cardDivBlock.append($divForTeethStructure);

                            $divForTreatmentCostDetails = $("<div class='col-xl-5 col-lg-12 mb-2' style='margin-top:23px'></div>");

                            $formGroupForCostOptionSelection = $("<div class='form-group col-md-12 p-0'></div>");
                            $fieldsetFixedRate = $("<fieldset class='pull-left'></fieldset>");
                            $labelFixedRate = $("<label class='custom-control custom-radio display-table'></label>");
                            $radioFixedRate = $(" <input class='custom-control-input rdFixed' id='' type='radio' name='priceCalculation" + $(this).attr("index") + "' checked='checked'/>").click(function () {
                                var elItemContainer = $(this).closest(".divListItemTreatmentWork");
                                $(elItemContainer).find(".crossMark").hide();
                                $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").hide();
                                var dCostPerTooth = Number($(elItemContainer).find(".costPerTooth").text());
                                var elTxtCost = $(elItemContainer).find(".txtTreatmentCost");
                                var elTxtTeethCount = $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth");
                                var elTotalCostPerAdvice = $(elItemContainer).find(".divTotalCostPerAdvice .totalCostPerAdvice");
                                elTxtCost.val(dCostPerTooth);
                                elTotalCostPerAdvice.html(dCostPerTooth);

                                TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                            });
                            $spanFixedRate = $("<span class='custom-control-indicator login-check'></span><span class='custom-control-description m-0'>Fixed Rate</span>");
                            $labelFixedRate.append($radioFixedRate).append($spanFixedRate);
                            $fieldsetFixedRate.append($labelFixedRate);
                            $formGroupForCostOptionSelection.append($fieldsetFixedRate);

                            $fieldsetMutiplyRate = $("<fieldset class='pull-left ml-2'></fieldset>");
                            $labelMutiplyRate = $("<label class='custom-control custom-radio display-table'></label>");
                            $radioMutiplyRate = $(" <input class='custom-control-input rdTeethMultiply' id='' type='radio' name='priceCalculation" + $(this).attr("index") + "'/>").click(function () {
                                var elItemContainer = $(this).closest(".divListItemTreatmentWork");
                                $(elItemContainer).find(".crossMark").show();
                                $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").show();
                                var divTeeth = $(elItemContainer).find(".divTeethStructure_Advice").find('label.active');
                                var noOfSelecedTeeth = divTeeth.length;
                                var dCostPerTooth = Number($(elItemContainer).find(".costPerTooth").text());
                                var elTxtCost = $(elItemContainer).find(".txtTreatmentCost");
                                var elTxtTeethCount = $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth");
                                var elTotalCostPerAdvice = $(elItemContainer).find(".divTotalCostPerAdvice .totalCostPerAdvice");
                                if (noOfSelecedTeeth == 0) {
                                    elTxtCost.val(dCostPerTooth);
                                    elTotalCostPerAdvice.html(dCostPerTooth * Number($(elTxtTeethCount).val()));
                                }
                                else {
                                    elTxtCost.val(dCostPerTooth);
                                    elTotalCostPerAdvice.html(dCostPerTooth * noOfSelecedTeeth);
                                    elTxtTeethCount.val(noOfSelecedTeeth);
                                }

                                TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                            });
                            $spanMultiplyRate = $("<span class='custom-control-indicator login-check'></span><span class='custom-control-description m-0'>Multiply With Teeth</span>");
                            $labelMutiplyRate.append($radioMutiplyRate).append($spanMultiplyRate);
                            $fieldsetMutiplyRate.append($labelMutiplyRate);
                            $formGroupForCostOptionSelection.append($fieldsetMutiplyRate);

                            $divForTreatmentCostDetails.append($formGroupForCostOptionSelection);

                            $formGroupForCost = $("<div class='form-inline col-md-12 p-0'></div>");
                            $fieldsetCost = $("<fieldset class='pull-left'></fieldset>");
                            $lblCost = $("<label>Cost :&nbsp;&nbsp;</label>");
                            var dEstimateCost = $(this).attr("cost");
                            $inputCost = $("<input class='form-control txtTreatmentCost key-int-only' type='text' min='0' id=''  value='" + $(this).attr("cost") + "' />")
                            .keyup(function () {
                                var elItemContainer = $(this).closest(".divListItemTreatmentWork");
                                $(elItemContainer).find(".crossMark").hide();
                                $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").hide();
                                var divTeeth = $(elItemContainer).find(".divTeethStructure_Advice").find('label.active');
                                var noOfSelecedTeeth = divTeeth.length;
                                var dCostPerTooth = Number($(elItemContainer).find(".costPerTooth").text());
                                var elTxtCost = $(this);
                                var elTxtTeethCount = $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth");
                                var elTotalCostPerAdvice = $(elItemContainer).find(".divTotalCostPerAdvice .totalCostPerAdvice");
                                elTotalCostPerAdvice.html(elTxtCost.val());

                                TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                            });
                            $lblMultiply = $("<label class='crossMark' style='display:none'>&nbsp;X&nbsp;</label>");
                            $inputNoOfTeeth = $("<input class='form-control txtTreatmentCostMultipliedWithTeeth key-int-only' type='text' id='' value='0' min='0' max='32' style='width: 97px;display:none'/>")
                                .keyup(function () {
                                    var elItemContainer = $(this).closest(".divListItemTreatmentWork");
                                    $(elItemContainer).find(".crossMark").show();
                                    $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").show();
                                    var divTeeth = $(elItemContainer).find(".divTeethStructure_Advice").find('label.active');
                                    var noOfSelecedTeeth = divTeeth.length;
                                    var dCostPerTooth = Number($(elItemContainer).find(".costPerTooth").text());
                                    var elTxtCost = $(elItemContainer).find(".txtTreatmentCost");
                                    var elTxtTeethCount = $(this);
                                    var elTotalCostPerAdvice = $(elItemContainer).find(".divTotalCostPerAdvice .totalCostPerAdvice");
                                    if (noOfSelecedTeeth == 0) {
                                        elTxtCost.val(dCostPerTooth);
                                        elTotalCostPerAdvice.html(dCostPerTooth * Number($(elTxtTeethCount).val()));
                                    }
                                    else {
                                        elTxtCost.val(dCostPerTooth);
                                        elTotalCostPerAdvice.html(dCostPerTooth * noOfSelecedTeeth);
                                        elTxtTeethCount.val(noOfSelecedTeeth);
                                    }

                                    TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                                });
                            $fieldsetCost.append($lblCost).append($inputCost).append($lblMultiply).append($inputNoOfTeeth);
                            $formGroupForCost.append($fieldsetCost);

                            $divForTreatmentCostDetails.append($formGroupForCost);

                            //$divNotes = $("<div class='row'><div class='col-xl-7 col-lg-12'><div class='form-group col-md-12'><fieldset class='pull-left col-md-12'></fieldset></div></div></div>");
                            $divNotes = $("<div class='col-lg-12 p-0'><div class='form-group col-md-12'><fieldset class='pull-left col-md-12'></fieldset></div></div>");
                            $divNotes.append("<label>Notes :&nbsp;&nbsp;</label>");
                            $txtNote = $("<textarea id='txtNote' class='form-control'></textarea>");
                            $divNotes.append($txtNote);

                            $divForTreatmentCostDetails.append($divNotes);

                            $divTotal = $('<div class="col-md-12 p-0 mt-1 p-1 divTotalCostPerAdvice" style="border-top: 1px solid #ccc;"><span class="">Total Amount:&nbsp;</span></div>');
                            $lblTotal = $('<i class="fa fa-inr">&nbsp<span class=" text-bold-700 totalCostPerAdvice">' + $(this).attr("cost") + '</span></i>');
                            $divTotal.append($lblTotal);

                            $divForTreatmentCostDetails.append($divTotal);
                            $cardDivBlock.append($divForTreatmentCostDetails);
                            $cardBodyBlock.append($cardDivBlock);
                            $cardBody.append($cardBodyBlock);
                            $card.append($cardBody);
                            $("#divAddedTreatments").append($card.append($("<span class='costPerTooth' style='display:none'>" + $(this).attr("cost") + "</span>")));

                            TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();
                        } else {
                            //$("#divAddedTreatments").perfectScrollbar();

                            //$(this).parent().removeClass("treatmentSelected");
                            //if ($("#divAddedTreatments").find(".divListItemTreatmentWork").length == 1) {
                            //    $("#divViewStarterMsg").show();
                            //}
                            //$(".divListItemTreatmentWork").remove();
                            return false;
                        }
                    });
                    $($li).append($a);
                    $("#divTreatmentMasterList").append($li);
                    //$("#divTreatmentMasterList").perfectScrollbar();
                }
            }
        }
    }
    function ViewActiveTreatmentList() {
        var arrTreatmentWork = JSON.parse(localStorageDetails.GetItem("_arrTreatmentWork"));

        if (arrTreatmentWork.length > 0 && arrTreatmentWork != null) {
            $("#divTreatmentWorkList").html('');
            for (var i = 0; i < arrTreatmentWork.length; i++) {
                var suidTreatmentWork = arrTreatmentWork[i]._suid;
                var sDate = arrTreatmentWork[i]._sDtTreatment;
                var suidTreatment = arrTreatmentWork[i]._suidTreatmentMaster;
                var sTeeth = arrTreatmentWork[i]._sTeeth;
                var suidDoctor = arrTreatmentWork[i]._suidDoctor;
                var dAmount = arrTreatmentWork[i]._dAmount;
                var dBillAmount = arrTreatmentWork[i]._dBillAmount;

                var dBalanceAmount = arrTreatmentWork[i]._dBalanceAmount;
                var jTreatmentWork = arrTreatmentWork[i]._jTreatmentWork;
                var arrTreatmentRecord = arrTreatmentWork[i]._treatmentRecord;
                var sSurfaces = arrTreatmentWork[i]._sSurfaces;
                var sTreatment = "";
                var sTreatmentShortCode = "";
                var sDoctorName = "";
                var jStatusBit = arrTreatmentWork[i]._jStatusBit;

                var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
                var arrDoctors = arrPrerequisiteData._arrDoctors;
                for (var jTreatmentMaster = 0; jTreatmentMaster < arrTreatmentMaster.length; jTreatmentMaster++) {
                    if (suidTreatment == arrTreatmentMaster[jTreatmentMaster]._suid) {
                        sTreatment = arrTreatmentMaster[jTreatmentMaster]._sName;
                        sTreatmentShortCode = arrTreatmentMaster[jTreatmentMaster]._sShortCode;
                        break;
                    }
                }
                for (var jDoctor = 0; jDoctor < arrDoctors.length; jDoctor++) {
                    if (suidDoctor == arrDoctors[jDoctor]._suid) {
                        sDoctorName = "Dr. " + arrDoctors[jDoctor]._sNameFirst + " " + arrDoctors[jDoctor]._sNameLast;
                        break;
                    }
                }
                var oTreatmentWorkDetails = {
                    suidTreatmentWork: suidTreatmentWork,
                    sDate: sDate,
                    suidTreatment: suidTreatment,
                    sTreatment: sTreatment,
                    sTreatmentShortCode: sTreatmentShortCode,
                    sTeeth: sTeeth,
                    suidDoctor: suidDoctor,
                    sDoctorName: sDoctorName,
                    dAmount: dAmount,
                    dBillAmount: dBillAmount,

                    dBalanceAmount: dBalanceAmount,
                    jTreatmentWork: jTreatmentWork,
                    sSurfaces: sSurfaces,
                    arrTreatmentRecord: arrTreatmentRecord
                };
                $card = $("<div class='card p-0 containerTreatmentWork' suidTreatmentWork='" + arrTreatmentWork[i]._suid + "' id='div" + arrTreatmentWork[i]._suid + "'></div>");
                // Header element start
                $cardHeader = $("<div class='card-header' style='padding:0.75rem 1rem;'></div>");
                $heading = $("<h5 class='card-title'>" + sTreatment + " (" + sTreatmentShortCode + ") " + "&nbsp;<small>" + arrTreatmentWork[i]._sDtTreatment + "</small></h5>");
                $headingElements = $("<div class='heading-elements' style='top: 9px;'></div>");
                $ulActions = $("<ul class='list-inline mb-0'></ul>");
                $liAddTreatmentRecord = $("<li dtTreatmentWork=" + sDate + " sTeeth=" + sTeeth + " suidTreatmentWork=" + arrTreatmentWork[i]._suid + ">\
												<a><i class='icon-plus' title='Add treatment records'></i></a>\
												<label class='sr-only'> " + JSON.stringify(oTreatmentWorkDetails) + "</label>\
										  </li>")
									.click(function () {
									    $("#divTreatmentWork").hide();
									    $("#divTreatmentRecord").show();
									    try {
									        SetTreatmentRecordView(JSON.parse($(this).find("label").text()));
									        HighlightTreatmentTeeth($(this).attr("sTeeth").split(","));
									        ViewPastRecords($(this).attr("suidTreatmentWork"));
									        T32App.Utility.MasterDataAlert("Please Select a Teeth to add Record.", "warning", 4000);
									    } catch (e) {
									    }
									});
                $liTreatmentDone = $("<li suidTreatmentWork='" + arrTreatmentWork[i]._suid + "' jStatusBit='" + jStatusBit + "'><a><i class='icon-check' title='Mark treatment work as done'></i></a></li>")
									.click(function () {
									    var jStatusBit = T32App.T32LIB.Utility.TREATMENTSTATUS.BIT_DONE;
									    var THIS = $(this);
									    treatmentDetails.CfnDoneOrDeleteTreatment(User.sSession, User.suid, Patient.suid, $(this).attr("suidTreatmentWork"), jStatusBit, function (result) {
									        if (result._jResponseCode == 1) {
									            T32App.Utility.MasterDataAlert("Treatment Advice Not Updated", "danger", 3000);
									        }
									        else if (result._jResponseCode == 0) {
									            $(THIS).find("a").css("cursor", "no-drop");
									            T32App.Utility.MasterDataAlert("Treatment Is Completed", "success", 3000);
									            var arrTreatmentWork = result._objResponse._arrTreatmentWork;
									            localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(arrTreatmentWork));
									            ViewTreatmentWorks();
									        }
									    })
									});
                if ($($liTreatmentDone).attr("jStatusBit") == 2) {
                    $($liTreatmentDone).css("pointer-events", "none").attr("disabled", "disabled").addClass("DISABLED").attr("title", "Treatment is Done!");
                    //$($liTreatmentDone).attr("title","");
                    //$($liTreatmentDone).find("a").css("cursor","no-drop").attr("disabled", "disabled").attr("title", "Treatment is Done!");
                }
                $liDeleteTreatment = $("<li suidTreatmentWork='" + arrTreatmentWork[i]._suid + "' ><a><i class='icon-trash' title='Delete treatment work'></i></a></li>")
									.click(function () {
									    var jStatusBit = T32App.T32LIB.Utility.TREATMENTSTATUS.BIT_CANCELLED;
									    treatmentDetails.CfnDoneOrDeleteTreatment(User.sSession, User.suid, Patient.suid, $(this).attr("suidTreatmentWork"), jStatusBit, function (result) {
									        if (result._jResponseCode == 1) {
									            T32App.Utility.MasterDataAlert("Treatment Advice Not Deleted", "danger", 3000);
									        }
									        else if (result._jResponseCode == 0) {
									            T32App.Utility.MasterDataAlert("Treatment Advice Deleted", "success", 3000);
									            var arrTreatmentWork = result._objResponse._arrTreatmentWork;
									            localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(arrTreatmentWork));
									            ViewTreatmentWorks();
									        }
									    })
									});
                $ulActions.append($liAddTreatmentRecord);
                $ulActions.append($liTreatmentDone);
                $ulActions.append($liDeleteTreatment);
                $headingElements.append($ulActions);
                $heading.append($headingElements);
                $cardHeader.append($heading);
                $card.append($cardHeader);
                // Header element end

                //Card body - treatment record list - start
                $cardBody = $("<div class='card-body'></div>");
                $cardBodyBlock = $("<div class='card-block mt-1 pt-0'><div class='row'></div></div>");
                $recordsContainer = $("<div class='col-xl-12 col-lg-12' id='divRecords" + arrTreatmentWork[i]._suid + "'><table class='table' id='tbl" + arrTreatmentWork[i]._suid + "'></table></div>");
                $cardBodyBlock.append($recordsContainer);
                $cardBody.append($cardBodyBlock);
                $card.append($cardBody);
                $("#divTreatmentWorkList").append($card);
                var arrTreatmentRecords = arrTreatmentWork[i]._treatmentRecord;
                if (arrTreatmentRecords != null) {
                    if (arrTreatmentRecords.length > 0) {
                        CreateDataTblTreatmentRecord(arrTreatmentWork[i], '#tbl' + arrTreatmentWork[i]._suid);
                    }
                    else {
                        $("#divRecords" + arrTreatmentWork[i]._suid).html('');
                        $("#divRecords" + arrTreatmentWork[i]._suid).html("<p class=text-muted>No treatments records added yet.</p>");
                    }
                }
                else {
                    $("#divRecords" + arrTreatmentWork[i]._suid).html('');
                    $("#divRecords" + arrTreatmentWork[i]._suid).html("<p class=text-muted>No treatments records added yet.</p>");
                }
            }
        }
        else {
            $("#divTreatmentWorkList").html('');
            $("#divTreatmentWorkList").html("<p style='font-size:36px;color:#ccc'>No treatments adviced yet. Click on <a class='btn btn-sm btn-md btn-outline-success mr-1 ml-1' id='btnAddAdvice1'><span class=success darken-2><i class=icon-plus></i></span></a>to add new treatment advice</p>");
        }
    }

    // Records
    function CreateDataTblTreatmentRecord(arrTreatmentWork, div) {
        var arrTreatmentRecords = arrTreatmentWork._treatmentRecord;
        var arrData = [];
        var sAge = "";
        sAge = Patient.jAge;
        for (var i = 0; i < arrTreatmentRecords.length; i++) {
            var treatmentRecord = {
                suid: arrTreatmentRecords[i]._suid,
                suidTreatmentWork: arrTreatmentWork._suid,
                suidTreatmentMaster: arrTreatmentWork._suidTreatmentMaster,
                dtTreatment: arrTreatmentRecords[i]._sDtTreatment,
                sTeeth: arrTreatmentRecords[i]._sTeeth,
                sTeethStructure: GetGraphicalRepresentationOfTeethForTreatment(arrTreatmentRecords[i]._sTeeth.split(','), ""),
                sWorkdone: arrTreatmentRecords[i]._sWorkdone,
                sNote: arrTreatmentRecords[i]._sNote,
                suidDoctor: arrTreatmentRecords[i]._suidDoctorEntity,
                fConsent: arrTreatmentRecords[i]._fConsent,
                sSurfacesInAdvice: arrTreatmentWork._sSurfaces,
                sSurfacesInRecord: arrTreatmentRecords[i]._sSurfaces
            }
            arrData.push(treatmentRecord);
        }

        if ($.fn.DataTable.isDataTable(div)) {
            $(div).DataTable().destroy();
        }

        $(div).empty();

        $(div).DataTable({
            destroy: true,
            scrollY: 200,
            "aaData": arrData,
            "bPaginate": true,
            "bInfo": true,
            "pagingType": "full_numbers",
            "iDisplayLength": 10,
            "ordering": true,
            "bLengthChange": false,
            "bFilter": true,
            "language": {
                "paginate": {
                    "first": "<<",
                    "last": ">>",
                    "next": ">",
                    "previous": "<"
                }
            },
            "aoColumns": [
				{
				    "sTitle": "Suid",
				    "mDataProp": "suid",
				    "visible": false
				}, {
				    "sTitle": "suidDoctor",
				    "mDataProp": "suidDoctor",
				    "visible": false
				}, {
				    "sTitle": "Suid",
				    "mDataProp": "suidTreatmentWork",
				    "visible": false
				}, {
				    "sTitle": "Suid",
				    "mDataProp": "suidTreatmentMaster",
				    "visible": false
				}, {
				    "sTitle": "Date",
				    "mDataProp": "dtTreatment",
				    class: "dt-center",
				    width: "12%",
				},
				{
				    "sTitle": "Workdone",
				    "mDataProp": "sWorkdone",
				    class: "dt-center",
				    mRender: function (data) {
				        if (data != "") {
				            return data;
				        }
				        else {
				            return '-';
				        }
				    }
				},
				{
				    "sTitle": "Note",
				    "mDataProp": "sNote",
				    class: "dt-center",
				    mRender: function (data) {
				        if (data != "") {
				            return data;
				        }
				        else {
				            return '-';
				        }
				    }
				},
				{
				    "sTitle": "Teeth",
				    "mDataProp": "sTeeth",
				    "visible": false
				}, {
				    "sTitle": "Teeth",
				    "mDataProp": "sSurfacesInAdvice",
				    "visible": false
				}, {
				    "sTitle": "Teeth",
				    "mDataProp": "sSurfacesInRecord",
				    "visible": false
				}, {
				    "sTitle": "Teeth",
				    "mDataProp": "sTeethStructure",
				    class: "dt-center",
				    width: "20%",
				},
				{
				    "sTitle": "Actions",
				    width: "10%",
				    mRender: function (data, type, row) {
				        return [
							'<a class="editTreatmentRecord btn-icon-edit mr-1" title="Edit Task" href="javascript:void(0)"><i class="fa fa-pencil"></i></a>',
							'<a class="deleteTreatmentRecord btn-icon-delete" title="Delete Task" href="javascript:void(0)"><i class="fa fa-trash-o"></i></a>'
				        ].join(' ');
				    },
				    class: "dt-center"
				}
            ],
        });
        $(".dataTables_scrollHeadInner").css("width", "100%");
        $(".dataTable").css("width", "100%");
        $(div).on('click', '.editTreatmentRecord', function () {
            var data = $(div).DataTable().row($(this).parents('tr')).data();
            try {
                var suidTreatmentWork = data.suidTreatmentWork;
                var suidTreatmentRecord = data.suid;
                var sTeeth = data.sTeeth;
                var suidTreatment = data.suidTreatmentMaster;
                var suidDoctor = data.suidDoctor;
                var suidTreatmentWork = data.suidTreatmentWork;
                var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
                var arrDoctors = arrPrerequisiteData._arrDoctors;

                $("#suidTreatmentWork").val(suidTreatmentWork);
                $("#suidTreatmentRecord").val(suidTreatmentRecord);
                $("#sTeeth").val(sTeeth);

                $("#dtTreatmentRecord").val(new Date().format("dd-MMM-yyyy"));
                fillDoctorComboFromArray(arrDoctors, "selTreatmentRecordDoctor");
                $("#selTreatmentRecordDoctor").val(suidDoctor);
                $("#txtWorkdone").val(data.sWorkdone);
                $("#txtSpecialNote").val(data.sNote);

                var teethStructure = GetGraphicalRepresentationOfTeethForTreatment(sTeeth.split(","), "");
                $("#divCurrentTreatmentTeeth").addClass("col-md-8").css("text-align", "center").html(teethStructure);

                var sSurfacesInAdvice = data.sSurfacesInAdvice;
                var sSurfacesInRecord = data.sSurfacesInRecord;
                var arrSurfacesTeeth = [];
                if (sSurfacesInAdvice.trim() != "") {
                    arrSurfacesTeeth = ArrSUnconcatDelimitedPlainText(sSurfacesInAdvice);
                }
                var sSurfaces = "";
                for (var i = 0; i < arrSurfacesTeeth.length; i++) {
                    var surface = SUnconcatDelimited(arrSurfacesTeeth[i]);
                    if (surface[0].sKey == sTeeth) {
                        sSurfaces = surface[0].sValue;
                    }
                }

                if (sSurfaces != "") {
                    var arrSurfaces = sSurfaces.split(',');
                    $("#divSurfaceList").html("");
                    $("#divSurfaceList").append("<label>Surfaces :&nbsp;</label>");
                    var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
                    for (var i = 0; i < arrSurfaces.length - 1; i++) {
                        var bit = arrSurfaces[i];
                        var sSurfaceName = "";
                        if (bit == lib.Utility.TEETHSURFACE.BIT_INCISAL) {
                            sSurfaceName = "Incisal";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_OCCLUSAL) {
                            sSurfaceName = "Occusal";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_MESIAL) {
                            sSurfaceName = "Mesial";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_DISTAL) {
                            sSurfaceName = "Distal";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_BUCCAL) {
                            sSurfaceName = "Buccal";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_LABIAL) {
                            sSurfaceName = "Labial";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_PALATAL) {
                            sSurfaceName = "Palatal";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_LINGUAL) {
                            sSurfaceName = "Lingual";
                        }
                        else if (bit == lib.Utility.TEETHSURFACE.BIT_CERVICAL) {
                            sSurfaceName = "Cervical";
                        }
                        var arrSurfacesInRecord = sSurfacesInRecord.split(',');
                        var isAvailable = false;
                        for (var j = 0; j < arrSurfacesInRecord.length - 1; j++) {
                            if (bit == arrSurfacesInRecord[j]) {
                                isAvailable = true;
                                break;
                            }
                        }
                        if (isAvailable) {
                            $chkSurface = "<label class='checkbox-inline'><input type='checkbox' name='chkSurfacesInRecord' bitValue='" + bit + "' checked />" + sSurfaceName + "</label>";
                        }
                        else {
                            $chkSurface = "<label class='checkbox-inline'><input type='checkbox' name='chkSurfacesInRecord' bitValue='" + bit + "' />" + sSurfaceName + "</label>";
                        }
                        $("#divSurfaceList").append($chkSurface);
                    }
                }
                ViewPastRecords(suidTreatmentWork);
                $("#divTreatmentWork").hide();
                $("#divTreatmentRecord").show();
                $("#divFormTreatmentRecord").show();
            } catch (e) {
                alert(e)
            }
        });
        $(div).on('click', '.deleteTreatmentRecord', function () {
            var data = $(div).DataTable().row($(this).parents('tr')).data();
            try {
                $("#suidTreatmentRecordToDelete").text(data.suid);
                $("#dlgTreatmentRecordDeleteConfirmation").modal("show");
            } catch (e) {

            }
        });
    }
    function SetTreatmentRecordView(oTreatmentWorkDetails) {
        $("#divFormTreatmentRecord").hide();
        $("#divCurrentTreatmentTeeth").html("");
        $("#suidTreatmentWork").val(oTreatmentWorkDetails.suidTreatmentWork);
        $("#titleTreatmentWork").html(oTreatmentWorkDetails.sTreatment + ' | ' + oTreatmentWorkDetails.sTreatmentShortCode);
        $tbl = $("<table class='col-md-12'></table>");
        $tblBody = $("<tbody></tbody>");

        if (Patient.jAge < 6) {
            var arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
            var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
            $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");

            for (var i = 0; i <= 9; i++) {
                if (i == 4) {
                    $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;'></td>");
                }
                else {
                    $td = $("<td style='border-bottom:solid black 1px;height:auto;'></td>");
                }


                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }

                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trUpper.append($td);
            }
            $tblBody.append($trUpper).append("<br/>");


            $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
            for (var i = 10; i <= 19; i++) {
                if (i == 14) {
                    $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
                }
                else {
                    $td = $("<td style='height:auto;'></td>");
                }

                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }

                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trLower.append($td);
            }
            $tblBody.append($trLower);
        }
        else if (Patient.jAge > 12) {
            var arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
            var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));

            $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");

            for (var i = 0; i <= 15; i++) {
                if (i == 7) {
                    $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
                }
                else {
                    $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
                }
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats='' surfaces='" + arrTeeth[i]._sSurface + "'><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);

                $trUpper.append($td);
            }
            $tblBody.append($trUpper).append("<br/>");


            $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
            for (var i = 16; i <= 31; i++) {
                if (i == 23) {
                    $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
                }
                else {
                    $td = $("<td style='height:auto;'></td>");
                }

                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
                }

                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trLower.append($td);
            }
            $tblBody.append($trLower);
            // $tbl.append($tblBody);
        }
        else {
            arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAll"));
            var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));

            $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");
            for (var i = 0; i <= 1; i++) {
                $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })
                $td.append($btn);

                $trUpper.append($td);
            }
            for (var i = 2; i <= 23; i++) {
                if (i == 12) {
                    $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
                }
                else {
                    $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
                }
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }
                if ((i != 2 && i != 23) && i % 2 != 0) {
                    $($td).attr("hidden", true);
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);

                $trUpper.append($td);
            }
            for (var i = 24; i <= 25; i++) {
                $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })
                $td.append($btn);

                $trUpper.append($td);
            }
            $tblBody.append($trUpper).append("<br/>");


            $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
            for (var i = 26; i <= 27; i++) {
                $td = $("<td style='height:auto;'></td>");
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trLower.append($td);
            }
            for (var i = 28; i <= 49; i++) {
                if (i == 38) {
                    $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
                }
                else {
                    $td = $("<td style='height:auto;'></td>");
                }

                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
                }
                if ((i != 28 && i != 49) && i % 2 != 0) {
                    $($td).attr("hidden", true);
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trLower.append($td);
            }
            for (var i = 50; i <= 51; i++) {
                $td = $("<td style='height:auto;'></td>");
                if (fShowImage == true || fShowImage == "true") {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
                }
                else {
                    $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
                }
                $btn.click(function () {
                    ViewForm_AddRecord($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"), oTreatmentWorkDetails.sTeeth);
                })

                $td.append($btn);
                $trLower.append($td);
            }
            $tblBody.append($trLower);
        }

        $tbl.append($tblBody);
        $divHeading = $("<div style='border:none; text-align:center;'><strong>Teeth:</strong></div>");

        $spanHiddenThings = $("<span suidTreatmentWork='' suidDoctor='' suidTreatment='' sTeeth='' hidden></span>")

        $divPaymentDetails = $("<div class='col-md-12' style='padding-top:8px;'></div>");
        $labelEstimate = $("<label class='alert-info'>Estimate(<span class='fa fa-inr'></span>): </label><label class='estimate alert-info'>0</label>");
        $labelBillAmount = $("<label class='alert-success' style='margin-left:8px;'>Bill Amount(<span class='fa fa-inr'></span>): </label><label class='billAmount alert-success'>0</label>");
        $labelBalance = $("<label class='alert-danger' style='margin-left:8px;'>Balance(<span class='fa fa-inr'></span>): </label><label class='balance alert-danger'>0</label>");
        $divPaymentDetails.append($labelEstimate).append($labelBillAmount).append($labelBalance);

        //$("#divCurrentTreatmentTeeth").append($divHeading).append($spanHiddenThings).append($tbl).append($divPaymentDetails); //@Test
        $("#divCurrentTreatmentTeeth").append($spanHiddenThings).append($tbl)
    }
    function ViewForm_AddRecord(sBits, sSurfaces, sTeeth) {
        $("#divAdvanceTreatment").hide();
        $("#radioConsentSigned").parent().hide();

        var sTreatment = "Treatment : Surgical Extraction ( E(s) )"//$("#divCurrentTreatmentTeeth").find("strong").text().trim();
        var sTreatmentShortCode = sTreatment.split('(');
        sTreatmentShortCode = sTreatmentShortCode[1].split(')');
        sTreatmentShortCode = sTreatmentShortCode[0];
        var arrTeeth = sTeeth.split(",");// == sTeeth ? sTeeth.split("") : sTeeth.split(",");
        var fBit = false;
        if (sTreatmentShortCode.trim() == "CNSLT") {
            fBit = true;
        }
        else {
            for (var j = 0; j < arrTeeth.length; j++) {
                if (sBits == arrTeeth[j]) {
                    fBit = true;
                    break;
                }
            }
        }
        $("#divCurrentTreatment").html(sTreatment);
        if (fBit) {
            //$("#suidTreatmentWork").val("");
            $("#suidTreatmentRecord").val("");
            $("#txtBillingNote").val("").focus(function () { $(this).select(); });
            $("#sTeeth").val("");

            var suidTreatment = $("#divCurrentTreatmentTeeth").find("span").attr("suidTreatment");
            var suidDoctor = $("#divCurrentTreatmentTeeth").find("span").attr("suidDoctor");
            //var suidTreatmentWork = $("#divTreatmentWorkList").find(".containerTreatmentWork").attr("suidTreatmentWork");
            var dBillAmount = "";
            //$("#suidTreatmentWork").val(suidTreatmentWork);

            var arrPrerequisiteData = JSON.parse(window.localStorage.getItem("PrerequisiteData"));
            var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
            var arrDoctors = arrPrerequisiteData._arrDoctors;

            var fGroup = false;
            for (var j = 0; j < arrTreatmentMaster.length; j++) {
                if (suidTreatment == arrTreatmentMaster[j]._suid) {
                    fGroup = arrTreatmentMaster[j]._fGroup;
                    break;
                }
            }
            var radioConsentSigned = false;
            for (var j = 0; j < arrTreatmentMaster.length; j++) {
                if (suidTreatment == arrTreatmentMaster[j]._suid) {
                    if (arrTreatmentMaster[j]._fConsent == true) {
                        $("#radioConsentSigned").parent().show();
                        break;
                    }
                }
            }
            if (!fGroup) {
                $teethStructure = GetGraphicalRepresentationOfTeethForTreatment(sBits.split(","), "");
                $("#sTeeth").val(sBits);
            }
            else {
                $teethStructure = GetGraphicalRepresentationOfTeethForTreatment(sTeeth.split(","), "");
                $("#sTeeth").val(sTeeth);
            }
            $("#divCurrentTreatmentTeethStucture").html($teethStructure);

            var dtToday = new Date(T32App.T32LIB.Data.sDateTime);
            var dt = dtToday.format("d-MMM-yyyy");
            $("#dtTreatmentRecord").val(dt);

            $("#dlgAddTreatmentRecordBody").find(".input-group.date").datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                endDate: "today",
            });

            //$("#dlgAddTreatmentRecord").modal("show");
            $("#divFormTreatmentRecord").show();

            $("#chkAddAdvanceTreatment").attr("checked", false);
            fillDoctorComboFromArray(arrDoctors, "selTreatmentRecordDoctor");
            $("#selTreatmentRecordDoctor").val(suidDoctor);
            setTimeout(function () {
                $("#currentTreatmentTooth" + sBits).removeClass("active");
            }, 100);

            //$("#divCurrentTreatmentTeeth").find("label.estimate").text(arrTreatmentRecords[0].dAmount);
            //$("#divCurrentTreatmentTeeth").find("label.billAmount").text(arrTreatmentRecords[0].dBillAmount);
            var dBalance = $("#divCurrentTreatmentTeeth").find("label.balance").text();

            $("#txtTotalAmount").val(0);
            $("#txtTotalAmount").attr("disabled", false);
            $("#txtTreatmentBalance").val(0);

            //var dTotalPaid = dBillAmount - dBalance

            $("#txtTotalPaidAmount").val(0);

            $("#txtTotalAmount")
	.on("keydown", function (e) {
	    // Allow: tab, escape, enter and .
	    if ($.inArray(e.keyCode, [9, 27, 13, 110, 190]) !== -1 ||
	        // Allow: Ctrl+A
			(e.keyCode == 65 && e.ctrlKey === true) ||
	        // Allow: home, end, left, right, down, up
			(e.keyCode >= 35 && e.keyCode <= 40)) {
	        // let it happen, don't do anything
	        return;
	    }
	    // Ensure that it is a number and stop the keypress
	    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode != 8 /*backspace*/) && (e.keyCode != 46 /*delete*/)) {
	        e.preventDefault();
	        //CalAdviceTotal();
	    }
	    else {
	        $(this).keyup(function () {
	            var jTextLength = $(this).val().length;
	            //if (jTextLength < 8) {
	            //    CalAdviceTotal();
	            //}
	            //else {
	            //    var sSubString = $(this).val().indexOf(".") != -1 ? function () { $(this).val().substring(0, 9); CalAdviceTotal(); } : $(this).val().substring(0, 6);
	            //    $(this).val(sSubString);
	            //}
	            if (jTextLength < 8) {
	            }
	            else {
	                var sSubString = $(this).val().substring(0, 7);
	                $(this).val(sSubString);
	            }
	        });
	    }
	})
	.on("blur", function () {
	    if ($(this).val().trim() == "") {
	        $(this).val("0");
	    }
	})
	.on("focus", function () { $(this).select(); })
	.on("click", function () { $(this).select(); });

            $("#txtTreatmentPayment, #txtTreatmentBalance")
			.on("keydown", function (e) {
			    // Allow: tab, escape, enter and .
			    if ($.inArray(e.keyCode, [9, 27, 13, 110, 190]) !== -1 ||
			        // Allow: Ctrl+A
					(e.keyCode == 65 && e.ctrlKey === true) ||
			        // Allow: home, end, left, right, down, up
					(e.keyCode >= 35 && e.keyCode <= 40)) {
			        // let it happen, don't do anything
			        return;
			    }
			    // Ensure that it is a number and stop the keypress
			    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode != 8 /*backspace*/) && (e.keyCode != 46 /*delete*/)) {
			        e.preventDefault();
			        //CalAdviceTotal();
			    }
			    else {
			        $(this).keyup(function () {
			            var jTextLength = $(this).val().length;
			            //if (jTextLength < 8) {
			            //    CalAdviceTotal();
			            //}
			            //else {
			            //    var sSubString = $(this).val().indexOf(".") != -1 ? function () { $(this).val().substring(0, 9); CalAdviceTotal(); } : $(this).val().substring(0, 6);
			            //    $(this).val(sSubString);
			            //}
			            if (jTextLength < 8) {
			            }
			            else {
			                var sSubString = $(this).val().substring(0, 7);
			                $(this).val(sSubString);
			            }
			        });
			    }
			})
			.on("blur", function () {
			    if ($(this).val().trim() == "") {
			        $(this).val("0");
			    }
			})
			.on("focus", function () { $(this).select(); })
			.on("click", function () { $(this).select(); });

            $("#txtTreatmentPayment").val("0");

            if (sSurfaces != undefined) {
                var arrSurfaces = sSurfaces.split(',');
                $("#divSurfaceList").html("");
                $("#divSurfaceList").append("<h5 style='float:left'>Surfaces :&nbsp;</h5>");
                var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
                for (var i = 0; i < arrSurfaces.length - 1; i++) {
                    var bit = arrSurfaces[i];
                    var sSurfaceName = "";
                    if (bit == lib.Utility.TEETHSURFACE.BIT_INCISAL) {
                        sSurfaceName = "Incisal";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_OCCLUSAL) {
                        sSurfaceName = "Occusal";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_MESIAL) {
                        sSurfaceName = "Mesial";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_DISTAL) {
                        sSurfaceName = "Distal";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_BUCCAL) {
                        sSurfaceName = "Buccal";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_LABIAL) {
                        sSurfaceName = "Labial";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_PALATAL) {
                        sSurfaceName = "Palatal";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_LINGUAL) {
                        sSurfaceName = "Lingual";
                    }
                    else if (bit == lib.Utility.TEETHSURFACE.BIT_CERVICAL) {
                        sSurfaceName = "Cervical";
                    }
                    //$chkSurface = "<label class='checkbox-inline'><input type='checkbox' name='chkSurfacesInRecord' bitValue='" + bit + "' />" + sSurfaceName + "</label>";
                    $chkSurface = '<fieldset style="float:left;margin-right:10px">\
									<label class="custom-control custom-checkbox display-table">\
										<input class="custom-control-input" id="" type="checkbox" name="chkSurfacesInRecord" bitValue="' + bit + '"/>\
										<span class="custom-control-indicator login-check"></span>\
										<span class="custom-control-description m-0">' + sSurfaceName + '</span>\
									</label>\
							   </fieldset>';
                    $("#divSurfaceList").append($chkSurface);
                }
            }
        }
        else {
            setTimeout(function () {
                $("#currentTreatmentTooth" + sBits).removeClass("active");
            }, 1000);
        }

        $("#txtWorkdone").focus().val("");
        $("#txtSpecialNote").val("");
    }
    function HighlightTreatmentTeeth(arrTreatmentTeeth) {
        var arrAllTeeth = $("#divCurrentTreatmentTeeth").find("label");

        for (var i = 0; i < arrAllTeeth.length; i++) {
            for (var j = 0; j < arrTreatmentTeeth.length; j++) {
                if ($(arrAllTeeth[i]).attr("toothSuids") == arrTreatmentTeeth[j]) {
                    $(arrAllTeeth[i]).addClass("btn-warning");
                }
            }
        }
    }
    function ViewPastRecords(suidTreatmentWork) {

        var arrAllWork = JSON.parse(localStorageDetails.GetItem("_arrTreatmentWork"));
        var arrWork = arrAllWork.filter(function (work) {
            return work._suid == suidTreatmentWork;
        });
        var arrRecords = arrWork[0]._treatmentRecord;

        $("#divTblPastRecords").html("");
        var elTable = $('<table class="table" height="20"></table>');
        var elHeader = $('<thead></thead>');
        var elHeaderRow = $('<tr><th>Teeth</th><th>WorkDone</th></tr>');

        var arrElDataRow = [];
        var elBody = $('<tbody style="overflow:auto"></tbody>');
        for (var j = 0; j < arrRecords.length; j++) {
            var elDataRow = $('<tr></tr>');
            var elTeeth = $('<td>' + GetGraphicalRepresentationOfTeethForTreatment(arrRecords[j]._sTeeth.split(','), "") + '</td>');
            var elWorkDone = $('<td>' + arrRecords[j]._sWorkdone + '</td>');
            elBody.append(elDataRow.append(elTeeth).append(elWorkDone));
        }
        if (arrRecords.length != 0) {
            $("#divTblPastRecords").append(elTable.append(elHeader.append(elHeaderRow)).append(elBody));
        }
        else {
            $("#divTblPastRecords").html("No work done yet. Please select a tooth on your left to add one.");
        }

        // Work Pending for
        var arrTeethAdviced = arrWork[0]._sTeeth.split(",");
        var arrTeethPendingForTreatment = [];
        var arrTeethTreated = [];
        for (var j = 0; j < arrRecords.length; j++) {
            arrTeethTreated.push(arrRecords[j]._sTeeth);
        }
        //for (var j = 0; j < arrRecords.length; j++) {
        //    for (var i = 0; i < arrTeethAdviced.length; i++) {
        //        if (arrRecords[j]._sTeeth == arrTeethAdviced[i]) {
        //            arrTeethPendingForTreatment.splice(j, 1);
        //            break;
        //        }
        //    }

        //}
        for (var j = 0; j < arrTeethAdviced.length; j++) {
            if (arrTeethTreated.length == 0) {
                arrTeethPendingForTreatment = arrTeethAdviced;
                break;
            }
            else {
                for (var i = 0; i < arrTeethTreated.length; i++) {
                    if (arrTeethAdviced[j] != arrTeethTreated[i]) {
                        arrTeethPendingForTreatment.push(arrTeethAdviced[j]);
                    }
                }
            }
        }
        var elPendingTeeth = $('<h5>Work Pending for</h5><div class="col-md-12 mt-1">' + GetGraphicalRepresentationOfTeethForTreatment(arrTeethPendingForTreatment)
								+ '</div>');
        $("#divTeethPendingForTreatment").html("").append(elPendingTeeth);
    }
    function SaveTreatmentRecordWithoutPayment() {
        var sTeeth = $("#sTeeth").val();
        var suidTreatmentWork = $("#suidTreatmentWork").val();
        var suidTreatmentRecord = $("#suidTreatmentRecord").val();

        var fConsentSigned = false;
        if ($("#radioConsentSigned").is(":checked")) {
            fConsentSigned = true;
        }

        var suidDoctor = $("#selTreatmentRecordDoctor").val();
        var dtTreatmentRecord = $("#dtTreatmentRecord").val();

        var sWorkdone = $("#txtWorkdone").val();
        var sNote = $("#txtSpecialNote").val();

        var checkedSurfaces = $("#divSurfaceList").find("input:checked");
        var surfaces = "";
        if (suidDoctor != "" && dtTreatmentRecord != "" && suidDoctor != null) {
            treatmentDetails.CfnAddTreatmentRecordWithoutPayment(User.sSession, User.suid, Patient.suid, suidTreatmentWork, suidTreatmentRecord, dtTreatmentRecord, suidDoctor, sTeeth, 0, sWorkdone, sNote, fConsentSigned, surfaces, function (result) {
                if (result._jResponseCode == 1) {
                    if ($("#divFormTreatmentRecord").css("display") == "none") {
                        T32App.Utility.MasterDataAlert("Please Select a Teeth to add Record.", "warning", 4000);
                    }
                    else {
                        ViewTreatmentWorks();
                    }
                }
                else if (result._jResponseCode == 0) {
                    T32App.Utility.MasterDataAlert("Record Saved successfully", "success", 4000);
                    localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));
                    ViewTreatmentWorks();
                }

            });
        }
        else if (suidDoctor == "" || suidDoctor == null) {
            $("#selTreatmentRecordDoctor").FieldAlert("Please select Doctor");
        }
        else if (dtTreatmentRecord == "") {
            $("#dtTreatmentRecord").FieldAlert("Please select Date");
        }
    }

    // History
    function ViewPatientHistory() {

    }
    function ViewDentalHistory() {

    }

    // Prescriptions
    function CreateDataTblPrescriptionTemplate(suidDoctor) {
        $("#tblPrescriptionTemplates").bootstrapTable("destroy");
        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));

        var arrPrescriptionTemplatesTblData = [];

        if (arrPrerequisiteData != null) {
            var arrPrescriptions = arrPrerequisiteData._arrPrescriptionTemplates;

            if (arrPrescriptions != null) {
                var sEntity = JSON.parse($("#cmbEntityRole").val());
                for (var j = 0; j < arrPrescriptions.length; j++) {
                    if (suidDoctor == "") {
                        var template = {
                            suid: arrPrescriptions[j]._suid,
                            sTemplate: arrPrescriptions[j]._sTemplate,
                            jTemplateBits: arrPrescriptions[j]._jTemplateBits,
                            //suidDoctor: arrPrescriptions[j]._suidDoctor
                            suidDoctor: arrPrescriptions[j]._skvpDoctors
                        };
                        arrPrescriptionTemplatesTblData.push(template);
                    }
                    else {
                        var arrDoctors = ArrSUnconcatDelimitedPlainText(arrPrescriptions[j]._skvpDoctors);
                        for (var jDoctor = 0; jDoctor < arrDoctors.length; jDoctor++) {
                            if (suidDoctor == arrDoctors[jDoctor]) {
                                var template = {
                                    suid: arrPrescriptions[j]._suid,
                                    sTemplate: arrPrescriptions[j]._sTemplate,
                                    jTemplateBits: arrPrescriptions[j]._jTemplateBits,
                                    //suidDoctor: arrPrescriptions[j]._suidDoctor
                                    suidDoctor: arrPrescriptions[j]._skvpDoctors
                                };
                                arrPrescriptionTemplatesTblData.push(template);
                                break;
                            }
                        }
                    }
                    //else if (sEntity._nBitsEntityType == T32App.T32LIB.Utility.ENTITYTYPE.BIT_SYSADMIN) {
                    //    var template = {
                    //        suid: arrPrescriptions[j]._suid,
                    //        sTemplate: arrPrescriptions[j]._sTemplate,
                    //        jTemplateBits: arrPrescriptions[j]._jTemplateBits,
                    //        suidDoctor: arrPrescriptions[j]._suidDoctor
                    //    };
                    //    arrPrescriptionTemplatesTblData.push(template);
                    //}
                }
            }
        }
        if ($.fn.DataTable.isDataTable('#tblPrescriptionTemplates')) {
            $('#tblPrescriptionTemplates').DataTable().destroy();
        }

        var newHeight = $(window).height() - ($("#navHeader").height()) - 150;
        newHeight = newHeight - 150;

        $('#tblPrescriptionTemplates tbody').empty();

        $("#tblPrescriptionTemplates").DataTable({
            destroy: true,
            scrollY: newHeight,
            "aaData": arrPrescriptionTemplatesTblData,
            "bPaginate": true,
            "bInfo": true,
            "pagingType": "full_numbers",
            "iDisplayLength": 10,
            "ordering": true,
            "autoWidth": false,
            "bLengthChange": false,
            "bFilter": true,
            "language": {
                "paginate": {
                    "first": "<<",
                    "last": ">>",
                    "next": ">",
                    "previous": "<"
                }
            },
            "aoColumns": [
				{
				    "sTitle": "Suid",
				    "mDataProp": "suid",
				    "visible": false
				},
				{
				    "sTitle": "Template Name",
				    "mDataProp": "sTemplate",
				    mRender: function (data, type, row) {
				        if (data != "") {
				            return '<span>' + data + '</span>';
				        } else {
				            return '-';
				        }
				    }
				},
				{
				    "sTitle": "suidDoctor",
				    "mDataProp": "suidDoctor",
				    "visible": false
				},
				{
				    "sTitle": "Actions",
				    class: "dt-center",
				    mRender: function (data, type, row) {
				        return [
								'<a class="print mr-1 btn-icon-print" href="javascript:void(0)">',
								'<i class="fa fa-print"></i>&nbsp;Print',
								//'<i class="fa fa-file-pdf-o">&nbsp;Print</i>',
								'</a>',
								'<a class="viewPrescriptionTemplate btn-icon-view" href="javascript:void(0)">',
								'<i class="fa fa-eye"></i>&nbsp;View',
								'</a>'
								//,
								//'<a class="edit ml10" href="javascript:void(0)">',
								//'<i class="fa fa-pencil">&nbsp;Edit</i>',
								//'</a>'
				        ].join('');
				    },
				    "sortable": false
				}
            ],
        });

        $(".dataTables_scrollHeadInner").css("width", "100%");
        $(".dataTable").css("width", "100%");
        $("#tblPrescriptionTemplates").on("click", ".print", function () {
            var data = $('#tblPrescriptionTemplates').DataTable().row($(this).parents('tr')).data();
            try {
                var row = data;
                var suidTargetEntity = "";

                suidPrescriptionThis = row.suid;
                sTemplateThis = row.sTemplate;
                //if (localStorageDetails.GetItem("patientInfo") == "undefined") {
                //    suidTargetEntity = $hiddenPatientInfo._suidEntity;
                //}
                //else {
                //    if ($hiddenPatientInfo._nBitsEntityType == T32App.T32LIB.Utility.ENTITYTYPE.BIT_PATIENT_DUMMY) {
                //        suidTargetEntity = $hiddenPatientInfo._suid;
                //    }
                //    else {
                //        suidTargetEntity = JSON.parse(localStorageDetails.GetItem("patientInfo"))._suidEntity;
                //    }
                //}
                var suidTargetEntity = Patient.suid;
                var sName = "";
                var age = "";
                var gender = "";
                if (!$("#divBlankPrescriptionTemplatePatientInfo").is(":hidden")) {
                    sName = $("#txtPatientNm").val();
                    age = $("#txtPatientAgeInYear").val();
                    gender = $("#selGender").val();

                }

                var arrPrescriptions = [];
                var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                if (arrPrerequisiteData != null) {
                    arrPrescriptions = arrPrerequisiteData._arrPrescriptionTemplates;
                }

                //if(allergy)
                //{ }
                //  else { go to print}
                var arr = localStorageDetails.GetItem("_arrAllergicMedicines");
                if (arr) {
                    var arrAllergicMedicines = JSON.parse(arr);
                    var arrPrescriptionsContents;
                    var arrMedicines = arrPrerequisiteData._arrMedicines;
                    var arrarrPrescriptionsContentsTblData = [];
                    for (var j = 0; j < arrPrescriptions.length; j++) {
                        if (row.suid == arrPrescriptions[j]._suid) {
                            arrPrescriptionsContents = arrPrescriptions[j]._arrPrescriptionContents;

                            if (arrPrescriptionsContents != null) {
                                var fAllergic = false;
                                for (var i = 0; i < arrPrescriptionsContents.length; i++) {
                                    for (var jAllergy = 0; jAllergy < arrAllergicMedicines.length; jAllergy++) {
                                        if (arrPrescriptionsContents[i]._suidMedicine == arrAllergicMedicines[jAllergy]._suidMedicine) {
                                            //T32App.Utility.ModalAlertMessage("Sorry, you have added some allergic medicines in prescription", "danger", 3000);
                                            //return false;
                                            fAllergic = true;
                                            $("#dlgPrintPrescription").modal("show");
                                            return false;
                                            break;
                                        }
                                        else {
                                            fAllergic = false;
                                        }
                                    }
                                    if (fAllergic) {
                                        break;
                                    }
                                }
                                if (!fAllergic) {
                                    var sEntity = JSON.parse($("#cmbEntityRole").val())._suidEntity;
                                    ShowLoader(true);
                                    prescription.CfnPrescribePrescriptionTemplate(userService.GetLoginResponse()._objResponse._sSession, sEntity, suidTargetEntity, row.suid, row.sTemplate, T32App.T32LIB.Utility.PRESCRIPTION_BITS.BIT_GENERAL, function (result) {
                                        if (result._jResponseCode == 1) {
                                            //alert("Sorry Prescription can not be saved.");
                                            T32App.Utility.Dialog.Show("Sorry Prescription Not Printed.");
                                            $("#dlgPrescriptionTemplate").modal("hide");
                                        }
                                        else if (result._jResponseCode == 0) {
                                            //alert("Prescription saved successfully");
                                            setTimeout(function () {
                                                ShowLoader(false);
                                                //T32App.Utility.Dialog.Show("Prescription saved successfully");
                                            }, 2000);

                                            var jLeft = (screen.width / 2) - (750 / 2);
                                            var jTop = (screen.height / 2) - (650 / 2);

                                            //window.location.assign("Reports/PrescriptionReport.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes');

                                            strUrl = "Reports/PrescriptionReport.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes';

                                            window.open(strUrl);

                                            //'your_url', 'popup_name','height=' + screen.height + ',width=' + screen.width + ',resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes


                                            //get prescription 
                                            if (JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrDummyPatients[0]._suid != suidTargetEntity) {
                                                prescription.CfnGetPrescriptions(userService.GetLoginResponse()._objResponse._sSession, sEntity, suidTargetEntity, function (resultGetPrescriptions) {
                                                    if (resultGetPrescriptions._jResponseCode == 0) {
                                                        localStorageDetails.SetItem("_arrPrescriptions", JSON.stringify(resultGetPrescriptions._objResponse._arrPrescriptions));
                                                        CreateDataTblPreviousPrescriptions();
                                                    }
                                                });
                                            }


                                            //window.open("Reports/Prescription.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, "_blank");

                                            $("#dlgPrescriptionTemplate").modal("hide");
                                        }
                                    });
                                }
                            }

                        }
                    }
                }
                else {
                    var sEntity = JSON.parse($("#cmbEntityRole").val())._suidEntity;
                    ShowLoader(true);
                    prescription.CfnPrescribePrescriptionTemplate(userService.GetLoginResponse()._objResponse._sSession, sEntity, suidTargetEntity, row.suid, row.sTemplate, T32App.T32LIB.Utility.PRESCRIPTION_BITS.BIT_GENERAL, function (result) {
                        if (result._jResponseCode == 1) {
                            //alert("Sorry Prescription can not be saved.");
                            T32App.Utility.Dialog.Show("Sorry Prescription Not Printed.");
                            $("#dlgPrescriptionTemplate").modal("hide");
                        }
                        else if (result._jResponseCode == 0) {
                            //alert("Prescription saved successfully");
                            setTimeout(function () {
                                ShowLoader(false);
                                //T32App.Utility.Dialog.Show("Prescription saved successfully");
                            }, 2000);

                            var jLeft = (screen.width / 2) - (750 / 2);
                            var jTop = (screen.height / 2) - (650 / 2);

                            //window.location.assign("Reports/PrescriptionReport.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes');

                            strUrl = "Reports/PrescriptionReport.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + Patient.jAge + "&gender=" + gender, ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes';

                            window.open(strUrl);

                            //'your_url', 'popup_name','height=' + screen.height + ',width=' + screen.width + ',resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes


                            //get prescription 
                            if (JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrDummyPatients[0]._suid != suidTargetEntity) {
                                prescription.CfnGetPrescriptions(User.sSession, User.suid, Patient.suid, function (resultGetPrescriptions) {
                                    if (resultGetPrescriptions._jResponseCode == 0) {
                                        localStorageDetails.SetItem("_arrPrescriptions", JSON.stringify(resultGetPrescriptions._objResponse._arrPrescriptions));
                                        CreateDataTblPreviousPrescriptions();
                                    }
                                });
                            }


                            //window.open("Reports/Prescription.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, "_blank");

                            $("#dlgPrescriptionTemplate").modal("hide");
                        }
                    });
                }

            } catch (e) {
                //alert(e)
            }
        });
        $("#tblPrescriptionTemplates").on("click", ".viewPrescriptionTemplate", function () {
            var data = $('#tblPrescriptionTemplates').DataTable().row($(this).parents('tr')).data();
            try {
                ShowCurrentPrescription(data);
            } catch (e) {
                alert(e)
            }
        });
    }
    function CreateDataTblPreviousPrescriptions() {
        //$("#tblSelectedPrescription").bootstrapTable("destroy");
        $("#divDtPrescription").hide();
        //var arrPrescriptions = T32App.T32LIB.Data.MasterData.EntityData._arrPrescriptions;
        var arrPrescriptions = JSON.parse(window.localStorage.getItem("_arrPrescriptions"));
        var arrPreviousPrescriptionData = [];

        if (arrPrescriptions != null) {
            for (var i = 0; i < arrPrescriptions.length; i++) {
                var sTemplate = "-";
                if (arrPrescriptions[i]._sTemplate != "general") {
                    sTemplate = arrPrescriptions[i]._sTemplate;
                }
                var treatmentBill = {
                    suid: arrPrescriptions[i]._suid,
                    sDate: arrPrescriptions[i]._sDate,
                    sTemplate: sTemplate
                };
                arrPreviousPrescriptionData.push(treatmentBill);
            }
        }

        if ($.fn.DataTable.isDataTable('#tblPreviousPrescriptions')) {
            $('#tblPreviousPrescriptions').DataTable().destroy();
        }

        var newHeight = $(window).height() - ($("#navHeader").height()) - 150;
        newHeight = newHeight - 150;

        $('#tblPreviousPrescriptions tbody').empty();

        $("#tblPreviousPrescriptions").DataTable({
            destroy: true,
            scrollY: newHeight,
            "aaData": arrPreviousPrescriptionData,
            "bPaginate": true,
            "bInfo": true,
            "pagingType": "full_numbers",
            "iDisplayLength": 10,
            "ordering": true,
            "autoWidth": false,
            "bLengthChange": false,
            "bFilter": true,
            "language": {
                "paginate": {
                    "first": "<<",
                    "last": ">>",
                    "next": ">",
                    "previous": "<"
                }
            },
            "aoColumns": [
				{
				    "sTitle": "Suid",
				    "mDataProp": "suid",
				    "visible": false
				},
				{
				    "sTitle": "Date",
				    "mDataProp": "sDate",
				},
				{
				    "sTitle": "Template Name",
				    "mDataProp": "sTemplate",
				    mRender: function (data, type, row) {
				        if (data != "") {
				            return '<span>' + data + '</span>';
				        } else {
				            return '-';
				        }
				    }
				},
				{
				    "sTitle": "Actions",
				    class: "dt-center",
				    mRender: function (data, type, row) {
				        return [
							'<a class="pdf mr-1 btn-icon-print" href="javascript:void(0)">',
							'<i class="fa fa-print"></i>&nbsp;Print',
							'</a>',
							'<a class="viewPrescription mr-1 btn-icon-view" href="javascript:void(0)">',
							'<i class="fa fa-eye"></i>&nbsp;View',
							'</a>',
							'<a class="editAndPrintPrescription btn-icon-edit" href="javascript:void(0)">',
							'<i class="icon-edit2"></i>&nbsp;Edit & Print',
							'</a>'
							//,
							//'<a class="edit ml10" href="javascript:void(0)">',
							//'<i class="fa fa-pencil">&nbsp;Edit</i>',
							//'</a>'
				        ].join('');
				    },
				    "sortable": false
				}
            ],
        });
        $(".dataTables_scrollHeadInner").css("width", "100%");
        $(".dataTable").css("width", "100%");
        $("#tblPreviousPrescriptions").on("click", ".pdf", function () {
            var data = $('#tblPreviousPrescriptions').DataTable().row($(this).parents('tr')).data();
            try {
                window.open("Reports/PrescriptionReport.aspx?entityId=" + Patient.suid + "&prescriptionId=" + data.suid + "&sName=" + "" + "&age=" + "" + "&gender=" + "", "_blank");
            } catch (e) {
                alert(e)
            }
        });
        $("#tblPreviousPrescriptions").on("click", ".viewPrescription", function () {
            var data = $('#tblPreviousPrescriptions').DataTable().row($(this).parents('tr')).data();
            try {
                ShowCurrentPrescription(data);
            } catch (e) {
                alert(e)
            }
        });
        $("#tblPreviousPrescriptions").on("click", ".editAndPrintPrescription", function () {
            var data = $('#tblPreviousPrescriptions').DataTable().row($(this).parents('tr')).data();
            try {
                Prescription.EditRow(data);
            } catch (e) {
                alert(e)
            }
        });
    }
    function ShowCurrentPrescription(row) {
        //T32App.T32LIB.Data.MasterData.EntityData = 
        //var arrPrescriptions = T32App.T32LIB.Data.MasterData.EntityData._arrPrescriptions;
        var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
        var arrPrescriptions = [];
        if (arrPrerequisiteData != null) {
            //if (!$("#divNavPrescriptionTemplate").is(":hidden")) {
            //    arrPrescriptions = arrPrerequisiteData._arrPrescriptionTemplates;
            //}
            //else
            if ($("#divTblPrescriptionTemplates").is(":hidden")) {
                arrPrescriptions = JSON.parse(localStorageDetails.GetItem("_arrPrescriptions"));
            }
            else {
                arrPrescriptions = arrPrerequisiteData._arrPrescriptionTemplates;
            }
            var arrPrescriptionsContents;
            //var sTemplate = "";
            var arrMedicines = arrPrerequisiteData._arrMedicines;
            //T32App.T32LIB.Data.MasterData._arrMedicines;
            var arrarrPrescriptionsContentsTblData = [];
            for (var i = 0; i < arrPrescriptions.length; i++) {
                if (row.suid == arrPrescriptions[i]._suid) {
                    //sTemplate = arrPrescriptions[i]._sTemplate
                    arrPrescriptionsContents = arrPrescriptions[i]._arrPrescriptionContents;
                    break;
                }
            }

            if (arrPrescriptionsContents != null) {
                for (var i = 0; i < arrPrescriptionsContents.length; i++) {
                    var sMedicine = "";
                    var strDoseType = "";
                    var sDosePriority = "";
                    for (var m = 0; m < arrMedicines.length; m++) {
                        if (arrPrescriptionsContents[i]._suidMedicine == arrMedicines[m]._suid) {

                            sMedicine = arrMedicines[m]._sName;
                        }
                    }
                    sDosePriority = (arrPrescriptionsContents[i]._jDosePriority == T32App.T32LIB.Utility.DOSE_PRIORITY.BIT_BEFORE_MEAL) ? "Before Meal" : "After Meal";

                    var arrDoseType = arrPrescriptionsContents[i]._sDoseType.split(",");
                    for (var d = 0; d < arrDoseType.length; d++) {
                        if (arrDoseType[d] == T32App.T32LIB.Utility.DOSE_TYPE.BIT_MORNING + "") {
                            strDoseType += "Morning";
                        }
                        else if (arrDoseType[d] == T32App.T32LIB.Utility.DOSE_TYPE.BIT_AFTERNOON + "") {
                            strDoseType += "Afternoon";
                        }
                            //else if (arrDoseType[d] == T32App.T32LIB.Utility.DOSE_TYPE.BIT_EVENING + "") {
                            //    strDoseType += "Evening";
                            //}
                        else if (arrDoseType[d] == T32App.T32LIB.Utility.DOSE_TYPE.BIT_NIGHT + "") {
                            strDoseType += "Night";
                        }
                        if (d < (arrDoseType.length - 1)) {
                            strDoseType += ", "
                        }
                    }
                    var unitsperdose = parseFloat(arrPrescriptionsContents[i]._sUnitsPerDose);
                    //var jTotal = arrDoseType.length * arrPrescriptionsContents[i]._jDays * unitsperdose
                    //var jTotalUnits = Math.round(jTotal);
                    var jTotal = arrDoseType.length * arrPrescriptionsContents[i]._jDays * unitsperdose
                    //var jTotalUnits = 
                    var prescriptionsContent = {
                        suid: arrPrescriptionsContents[i]._suid,
                        suidMedicine: arrPrescriptionsContents[i]._suidMedicine,
                        sMedicine: sMedicine,
                        jUnits: arrPrescriptionsContents[i]._sUnitsPerDose,
                        sDoseType: arrPrescriptionsContents[i]._sDoseType,
                        strDoseType: strDoseType,
                        jDosePriority: arrPrescriptionsContents[i]._jDosePriority,
                        sDosePriority: sDosePriority,
                        jDays: arrPrescriptionsContents[i]._jDays,
                        jTotalUnits: arrPrescriptionsContents[i]._jTotalUnits,
                        suidMedicineType: arrPrescriptionsContents[i]._suidMedicineType
                    };
                    arrarrPrescriptionsContentsTblData.push(prescriptionsContent);
                }
            }
        }

        if ($.fn.DataTable.isDataTable('#tblSelectedPrescription')) {
            $('#tblSelectedPrescription').DataTable().destroy();
        }

        var newHeight = $(window).height() - ($("#navHeader").height()) - 200;
        newHeight = newHeight - 100;

        $('#tblSelectedPrescription tbody').empty();

        $("#tblSelectedPrescription").DataTable({
            destroy: true,
            scrollY: newHeight,
            "aaData": arrarrPrescriptionsContentsTblData,
            "bPaginate": true,
            "bInfo": true,
            "pagingType": "full_numbers",
            "iDisplayLength": 10,
            "ordering": true,
            "autoWidth": false,
            "bLengthChange": false,
            "bFilter": true,
            "language": {
                "paginate": {
                    "first": "<<",
                    "last": ">>",
                    "next": ">",
                    "previous": "<"
                }
            },
            "aoColumns": [
				{
				    "sTitle": "Suid",
				    "mDataProp": "suid",
				    "visible": false
				},
				{
				    "sTitle": "suidMedicine",
				    "mDataProp": "suidMedicine",
				    "visible": false,
				},
				{
				    "sTitle": "Medicine",
				    "mDataProp": "sMedicine"
				},
				{
				    "sTitle": "Units",
				    "mDataProp": "jUnits",
				},
				{
				    "sTitle": "sDoseType",
				    "mDataProp": "sDoseType",
				    "visible": false,
				},
				{
				    "sTitle": "Dose Type",
				    "mDataProp": "strDoseType",
				},
				{
				    "sTitle": "jDosePriority",
				    "mDataProp": "jDosePriority",
				    "visible": false,
				},
				{
				    "sTitle": "Dose Priority",
				    "mDataProp": "sDosePriority",
				},
				{
				    "sTitle": "Days",
				    "mDataProp": "jDays",
				},
				{
				    "sTitle": "Total Units",
				    "mDataProp": "jTotalUnits",
				},
				{
				    "sTitle": "suidMedicineType",
				    "mDataProp": "suidMedicineType",
				    "visible": false,
				},
            ],
        });
        $(".dataTables_scrollHeadInner").css("width", "100%");
        $(".dataTable").css("width", "100%");
        $("#tblSelectedPrescription_filter").hide();

        $("#divDtPrescription").show();
        if (!$("#dlgPrescriptionTemplate").is(":hidden")) {
            //arrPrescriptions = JSON.parse(window.localStorage.getItem("_arrPrescriptions"));
            $("#divDtPrescription").text("Prescription Template : " + row.sTemplate);
        }
        else if (!$("#divNavPrescriptionTemplate").is(":hidden")) {
            $("#divDtPrescription").text("Prescription Template : " + row.sTemplate);
        }
        else {
            $("#divDtPrescription").text("Prescription dated on : " + row.sDate);
        }
        $close = $("<a href='#' class='close'>&times;</a>").click(function () {
            $("#divDtPrescription").hide();
            $("#tblSelectedPrescription").bootstrapTable("destroy");
        });
        //$("#divDtPrescription").append($close);
        //dlgViewPrescriptionBody
        $("#dlgViewPrescription").modal("show");
    };

    // Labs
    function UpdateTasksToPending() {
        var sEntity = userService.GetLoginResponse()._objResponse._entityDetails[0]._suidEntity;
        labWork.CfnUpdateJobToPending(userService.GetLoginResponse()._objResponse._sSession, sEntity, function (result) {
            if (result._jResponseCode == 0) {
                //$("#message").text(result._objResponse.sMessage);
                //$("#customAlertModal").modal("show");
                var sSession = userService.GetLoginResponse()._objResponse._sSession;
                var sEntity = userService.GetLoginResponse()._objResponse._entityDetails[0]._suidEntity;
                var sFilter = "";
                var txtName = "";
                var jobtype = "";
                var lab = "";
                var jobStatus = "";

                var sSearchFilter = "";
                var arrFilter = [txtName, jobtype, lab, jobStatus];
                sFilter = SConcatWithSuitebleDelim(arrFilter)

                // Commented as no sliding window added - Sufiyan
                //g_jobData = new JobData();
                //g_jobData.SlidePageJob(0, sFilter);

                labWork.CfnGetJobNotifications(sSession, sEntity, "", function (result) {
                    if (result._objResponse._jResponseCode == 0) {
                        CreateDataTblAllJobsNotifications(result._objResponse._aei);
                        labWork.CfnGetJobPending(sSession, sEntity, "", function (result) {
                            CreateDataTblPendingJobsNotifications(result._objResponse._aei);
                        })
                    }
                });
            }
            else {
                //$("#message").text("Something went wrong");
                //$("#customAlertModal").modal("show");
            }
        })
    }
    /* ---------  EVENTS ------------------------------------------------- */
    // Patient info
    $(document).on("keydown", "#txtAge", function (e) {
        fCanChange = false;
        // Allow: tab, escape, enter and .
        if ($.inArray(e.keyCode, [9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A
			(e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: home, end, left, right, down, up
			(e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            fCanChange = false;
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode != 8 /*backspace*/) && (e.keyCode != 46 /*delete*/)) {
            e.preventDefault();
        }
        else {
            fCanChange = true;
        }
        $(this).keyup(function (e) {
            var txtAge = $("#txtAge").val();
            if (txtAge != "") {
                var dt = new Date();
                var year = dt.getFullYear();
                var yearOfDOB = year - parseInt(txtAge);
                var totalMonths = parseInt(txtAge) * 12;
                dt.setMonth(dt.getMonth() - totalMonths);
                var finalDate = new Date("01 Jun " + dt.getFullYear());
                var dtToday = new Date();
                var diff = datediff(dtToday, finalDate);
                if (diff[0] < parseInt(txtAge)) {
                    finalDate.setYear(finalDate.getFullYear() - 1);
                }
                if (fCanChange) {
                    $("#dtDOBPatient").val("01-Jun-" + finalDate.getFullYear());
                    $("#dtDOBPatient").closest(".input-group.date").datepicker("setDate", "01-Jun-" + finalDate.getFullYear());
                }
            }
        });
    });
    $("#dtDOBPatient").on("change", function () {
        var txtDOB = $("#dtDOBPatient").val();
        if (txtDOB != "") {
            var dtToday = new Date();
            var dtDOB = new Date(txtDOB.replace("-", " "));
            var diff = datediff(dtToday, dtDOB)[0];
            isNaN(diff) ? "" : $("#txtAge").val(diff);
        }
        if ($("#txtAge").val() == "") {
            $("#txtAge").focus();
        }
        else {
            $("#selBloodGroupPatient").focus();
        }
    }).on("blur", function () {
        var txtDOB = $("#dtDOBPatient").val();
        if (txtDOB != "") {
            var dtToday = new Date();
            var dtDOB = new Date(txtDOB.replace("-", " "));
            var diff = datediff(dtToday, dtDOB)[0];
            isNaN(diff) ? "" : $("#txtAge").val(diff);
        }
        else {
            $("#txtAge").val("");
        }
        if ($("#txtAge").val() == "") {
            $("#txtAge").focus();
        }
        else {
            $("#selBloodGroupPatient").focus();
        }
    });
    $("#btnViewPatientProfile").click(function () {
        $("#divPatientDashboard").hide();
        $("#divFormPatient").show();
        localStorageDetails.SetItem("IsInPatientDashboard", true);
        var nEntityBitType = JSON.parse($("#cmbEntityRole").val())._nBitsEntityType;
        EditPatientProfile(nEntityBitType, Patient.suid);
    });
    $("#btnSavePatientPD").click(function () {
        //TEntity
        var txtFirstNamePatient = $("#txtFirstNamePatient").val().trim();
        var txtMiddleNamePatient = $("#txtMiddleNamePatient").val().trim();
        var txtLastNamePatient = $("#txtLastNamePatient").val().trim();
        var dtPatientRegistration = $("#dtPatientRegistration").val();
        var profilePhotoPatient = $("#patientProfileBlobId").val();

        var file = $("#profilePhotoPatient")[0].files[0];

        //TPersonInfoFixed      
        var dtDOBPatient = $("#dtDOBPatient").val();
        var selBloodGroupPatient = $("#selBloodGroupPatient").val();

        //TPersonInfoTransient  
        var selGenderPatient = $("#selGenderPatient").val();
        var txtPatientPhone = $("#txtPatientPhone").val().trim();
        var txtPatientMobile = $("#txtPatientMobile").val().trim();
        var txtEmailPatient = $("#txtEmailPatient").val().trim();
        var txtAddressPatient = $("#txtAddressPatient").val().trim();
        var sUserName = $("#txtUserNamePatient").val().trim();
        var sPassword = $("#txtPasswordPatient").val().trim();

        var testName = /^[A-Za-z\s]+$/.test(txtFirstNamePatient);
        if (testName == false) {
            T32App.Utility.EntityProfileAlert("Enter Valid First Name", "danger", 10000);
            return;
        }

        if (txtMiddleNamePatient != "") {
            testName = /^[A-Za-z\s]+$/.test(txtMiddleNamePatient);
            if (testName == false) {
                T32App.Utility.EntityProfileAlert("Enter Valid Middle Name", "danger", 10000);
                return;
            }
        }

        testName = /^[A-Za-z\s]+$/.test(txtLastNamePatient);
        if (testName == false) {
            T32App.Utility.EntityProfileAlert("Enter Valid Last Name", "danger", 10000);
            return;
        }

        if (txtPatientMobile != "") {
            var arrMobNo = txtPatientMobile.split(",");
            for (var i = 0; i < arrMobNo.length; i++) {
                if (isNaN(arrMobNo[i])) {
                    T32App.Utility.EntityProfileAlert("Enter Valid Mobile Number", "danger", 3000);
                    $("#txtPatientMobile").focus();
                    return false;
                }
                if (arrMobNo[i].length < 10 || arrMobNo[i].length > 15) {
                    T32App.Utility.EntityProfileAlert("Enter Valid Mobile Number", "danger", 3000);
                    $("#txtPatientMobile").focus();
                    return false;
                }
            }

        }
        if (txtPatientPhone != "") {
            var arrPhNo = txtPatientPhone.split(",");
            for (var i = 0; i < arrPhNo.length; i++) {
                if (isNaN(arrPhNo[i])) {
                    T32App.Utility.EntityProfileAlert("Enter Valid Phone Number", "danger", 10000);
                    $("#txtPatientPhone").focus();
                    return;
                }
                if (arrPhNo[i].length < 11 || arrPhNo[i].length > 15) {
                    T32App.Utility.EntityProfileAlert("Enter Valid Phone Number", "danger", 3000);
                    $("#txtPatientPhone").focus();
                    return false;
                }
            }
        }

        if (dtDOBPatient != "") {
            var dtDOB = new Date(dtDOBPatient.replace("-", " "));
            var dtReg = new Date(dtPatientRegistration.replace("-", " "));

            if (dtReg < dtDOB) {
                T32App.Utility.EntityProfileAlert("Enter valid registration date i.e it should be greater than date of birth.", "danger", 3000);
                return false;
            }
            var dtToday = new Date();
            var diff = datediff(dtToday, dtDOB);
            if (diff[0] == 0 && diff[1] < 6) {
                $("#dlgPatientAgeConfirm1").modal("show");
                return false;
            }
            if (diff[0] > 150) {
                T32App.Utility.EntityProfileAlert("Enter valid date of birth. Age is greater than 150 years", "danger", 3000);
                return false;
            }
        }

        if (txtFirstNamePatient != "" && txtLastNamePatient != "" && selGenderPatient != "") {

            var isValidEmail = false;
            if (txtEmailPatient != "") {
                isValidEmail = FValidateEmail(txtEmailPatient);
                if (!isValidEmail) {
                    T32App.Utility.EntityProfileAlert("Please Enter Valid Email-Id.", "danger", 2000);
                    return false;
                }
            }

            $("#btnSavePatient").attr("disabled", true).css({ cursor: "not-allowed" });
            $("#btnSavePatientAndContinue").attr("disabled", true).css({ cursor: "not-allowed" });
            $("#btnCancelPatient").attr("disabled", true).css({ cursor: "not-allowed" });
            var sKey = "";
            var sValue = "";
            var sPersonTransientSkvp = "";
            var arrPersonTransientSkvp = [];

            selGenderPatient = selGenderPatient != "" ? SConcatWithSuitebleDelim(["selGenderPatient", selGenderPatient]) : "";
            txtPatientPhone = txtPatientPhone != "" ? SConcatWithSuitebleDelim(["txtPatientPhone", txtPatientPhone]) : "";
            txtPatientMobile = txtPatientMobile != "" ? SConcatWithSuitebleDelim(["txtPatientMobile", txtPatientMobile]) : "";
            txtEmailPatient = txtEmailPatient != "" ? SConcatWithSuitebleDelim(["txtEmailPatient", txtEmailPatient]) : "";
            txtAddressPatient = txtAddressPatient != "" ? SConcatWithSuitebleDelim(["txtAddressPatient", txtAddressPatient]) : "";

            selGenderPatient != "" ? arrPersonTransientSkvp.push(selGenderPatient) : "";
            txtPatientPhone != "" ? arrPersonTransientSkvp.push(txtPatientPhone) : "";
            txtPatientMobile != "" ? arrPersonTransientSkvp.push(txtPatientMobile) : "";
            txtEmailPatient != "" ? arrPersonTransientSkvp.push(txtEmailPatient) : "";
            txtAddressPatient != "" ? arrPersonTransientSkvp.push(txtAddressPatient) : "";

            sPersonTransientSkvp = SConcatWithSuitebleDelim(arrPersonTransientSkvp);

            //TODO\/
            var sEntityTarget = $("#suidPatient").text();

            //TODO^

            var sEntity = JSON.parse($("#cmbEntityRole").val())._suidEntity;
            var nBitsEntityType = T32App.T32LIB.Utility.ENTITYTYPE.BIT_PERSON | T32App.T32LIB.Utility.ENTITYTYPE.BIT_PATIENT;
            var status = "active";
            var nRelation = localStorageDetails.GetItem("nRelation");
            var suidRelatedTo = localStorageDetails.GetItem("suidRelatedTo");
            var fUserInfo = $("#divFormPatient .userInfo").is(":hidden");

            if (!fUserInfo) {
                sUserName != "" && sPassword != "" ? fUserInfo = true : fUserInfo = false;
            }
            else {
                fUserInfo = true;
                sUserName = "";
                sPassword = "";
            }
            if (fUserInfo) {
                if (file) {

                    fileDetails.cfnSaveFile(file, userService.GetLoginResponse()._objResponse._sSession, sEntity, function (fileInfo) {
                        if (fileInfo) {
                            profilePhotoPatient = fileInfo.sBlobId;

                            entityDetails.CfnAddOrModifyEntityProfile(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, txtFirstNamePatient, txtMiddleNamePatient, txtLastNamePatient, dtPatientRegistration, profilePhotoPatient, dtDOBPatient, selBloodGroupPatient, sPersonTransientSkvp, nBitsEntityType, sUserName, sPassword, status, nRelation, suidRelatedTo, function (resultAddOrModifyEntity) {
                                if (resultAddOrModifyEntity._jResponseCode == 1) {
                                    //T32App.Utility.Dialog.Show("Error in saving data");
                                    //T32App.Utility.Dialog.Show(resultAddOrModifyEntity._sResponseInfo);
                                    T32App.Utility.MasterDataAlert(resultAddOrModifyEntity._sResponseInfo, "danger", 2000);
                                    $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#divFormPatient").hide();
                                    $("#divPatientDashboard").show();
                                    $("#divTreatmentWork").show();
                                }
                                else if (resultAddOrModifyEntity._jResponseCode == 0) {
                                    var entityInfo = JSON.parse($("#cmbEntityRole").val());
                                    localStorage.setItem("ActivePatient", JSON.stringify(resultAddOrModifyEntity._objResponse._entityData));
                                    T32App.Utility.MasterDataAlert("Profile saved successfully.", "success", 4000);
                                    setTimeout(function () {
                                        if (sEntityTarget != "" && nBitsEntityType == (T32App.T32LIB.Utility.ENTITYTYPE.BIT_PERSON | T32App.T32LIB.Utility.ENTITYTYPE.BIT_PATIENT)) {
                                            entityDetails.CfnGetEntityProfile(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, function (result) {
                                                if (result._jResponseCode == 0) {
                                                    LoadAllRecordsNew();
                                                }
                                            });
                                        }

                                        //UpdatePatientsAndAppointments(entityInfo, sEntityTarget, function () {
                                        //    //LoadAllRecordsNew();
                                        //}); 
                                        UpadateCurrentPatientDetails(userService.GetLoginResponse()._objResponse._sSession, sEntityTarget);
                                        //Patient.UpdatePatientInfo();
                                        if (sEntityTarget != "" && nBitsEntityType == (T32App.T32LIB.Utility.ENTITYTYPE.BIT_PERSON | T32App.T32LIB.Utility.ENTITYTYPE.BIT_PATIENT)) {
                                            entityDetails.CfnGetEntityProfile(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, function (result) {
                                                if (result._jResponseCode == 0) {
                                                    //LoadAllRecordsNew();
                                                }
                                            });
                                        }

                                        //UpdatePatientsAndAppointments(entityInfo, sEntityTarget, function () {
                                        //    //LoadAllRecordsNew();
                                        //});
                                    }, 2000);
                                    $("#dlgAddPatient").modal("hide");
                                    $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
                                    $("#divFormPatient").hide();
                                    $("#divPatientDashboard").show();
                                    $("#divTreatmentWork").show();
                                }
                            });
                        }
                    });

                }
                else {
                    entityDetails.CfnAddOrModifyEntityProfile(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, txtFirstNamePatient, txtMiddleNamePatient, txtLastNamePatient, dtPatientRegistration, profilePhotoPatient, dtDOBPatient, selBloodGroupPatient, sPersonTransientSkvp, nBitsEntityType, sUserName, sPassword, status, nRelation, suidRelatedTo, function (resultAddOrModifyEntity) {
                        if (resultAddOrModifyEntity._jResponseCode == 1) {
                            //T32App.Utility.Dialog.Show("Error in saving data");
                            //T32App.Utility.Dialog.Show(resultAddOrModifyEntity._sResponseInfo);
                            T32App.Utility.MasterDataAlert(resultAddOrModifyEntity._sResponseInfo, "danger", 2000);
                            $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                            $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                            $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
                            $("#divFormPatient").hide();
                            $("#divPatientDashboard").show();
                            $("#divTreatmentWork").show();
                        }
                        else if (resultAddOrModifyEntity._jResponseCode == 0) {
                            var entityInfo = JSON.parse($("#cmbEntityRole").val());
                            localStorage.setItem("ActivePatient", JSON.stringify(resultAddOrModifyEntity._objResponse._entityData));
                            T32App.Utility.MasterDataAlert("Profile saved successfully.", "success", 4000);
                            setTimeout(function () {
                                if (sEntityTarget != "" && nBitsEntityType == (T32App.T32LIB.Utility.ENTITYTYPE.BIT_PERSON | T32App.T32LIB.Utility.ENTITYTYPE.BIT_PATIENT)) {
                                    entityDetails.CfnGetEntityProfile(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, function (result) {
                                        if (result._jResponseCode == 0) {
                                            //LoadAllRecordsNew();
                                        }
                                    });
                                }

                                //UpdatePatientsAndAppointments(entityInfo, sEntityTarget, function () {
                                //    //LoadAllRecordsNew();
                                //});
                                UpadateCurrentPatientDetails(sEntity, sEntityTarget);
                                Patient.UpdatePatientInfo();
                            }, 2000);
                            $("#dlgAddPatient").modal("hide");
                            $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                            $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                            $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
                            $("#divFormPatient").hide();
                            $("#divPatientDashboard").show();
                            $("#divTreatmentWork").show();
                        }
                    });
                }
            }
            else if (sUserName == "") {
                T32App.Utility.EntityProfileAlert("Please Enter User Name.", "danger", 2000);
                $("#txtUserNamePatient").focus();
                $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
            }
            else if (sPassword == "") {
                T32App.Utility.EntityProfileAlert("Please Enter Password.", "danger", 2000);
                $("#txtPasswordPatient").focus();
                $("#btnSavePatientPD").attr("disabled", false).css({ cursor: "pointer" });
                $("#btnSavePatientAndContinue").attr("disabled", false).css({ cursor: "pointer" });
                $("#btnCancelPatient").attr("disabled", false).css({ cursor: "pointer" });
            }
        }

        else {
            if (txtFirstNamePatient == "") {
                T32App.Utility.EntityProfileAlert("Please Enter First Name.", "danger", 2000);
                $("#txtFirstNamePatient").focus();
            }
            else if (txtLastNamePatient == "") {
                T32App.Utility.EntityProfileAlert("Please Enter Last Name.", "danger", 2000);
                $("#txtLastNamePatient").focus();
            }
            else if (selGenderPatient == "") {
                T32App.Utility.EntityProfileAlert("Please Select Gender.", "danger", 2000);
                $("#selGenderPatient").focus();
            }
        }
    });
    $("#btnCancelPatientProfilePD").click(function () {
        $("#divFormPatient").hide();
        $("#divPatientDashboard").show();
    });

    // aTabs
    $("ul li a").click(function () {
        if ($("btnSaveTreatmentWork").text("Save Advice")) {
            $("#btnBackAddAdvice").hide();
            $("#btnSaveTreatmentWork").hide();
            $("#btnAddAdvice").show();
            $("#divAddAdvice").hide();
            $("#divAllTabPanel").show();
        }
    });
    $("#aTabActiveTreatments").click(function () {
        ViewTreatmentWorks();
    });
    $("#aTabCompleteTreatments").click(function () {
        treatmentDetails.CfnGetTreatmentWork(User.sSession, User.suid, Patient.suid, function (result) {
            if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));
                var arrTreatmentWork = result._objResponse._arrTreatmentWork;
                var arrTreatmentWorkDetails = [];
                if (arrTreatmentWork.length > 0 && arrTreatmentWork != null) {
                    for (var i = 0; i < arrTreatmentWork.length; i++) {
                        if (arrTreatmentWork[i]._jStatusBit == 2) {
                            var suidTreatmentWork = arrTreatmentWork[i]._suid;
                            var sDate = arrTreatmentWork[i]._sDtTreatment;
                            var suidTreatment = arrTreatmentWork[i]._suidTreatmentMaster;
                            var sTeeth = arrTreatmentWork[i]._sTeeth;
                            var suidDoctor = arrTreatmentWork[i]._suidDoctor;
                            var dAmount = arrTreatmentWork[i]._dAmount;
                            var dBillAmount = arrTreatmentWork[i]._dBillAmount;

                            var dBalanceAmount = arrTreatmentWork[i]._dBalanceAmount;
                            var jTreatmentWork = arrTreatmentWork[i]._jTreatmentWork;
                            var arrTreatmentRecord = arrTreatmentWork[i]._treatmentRecord != undefined ? arrTreatmentWork[i]._treatmentRecord : [];
                            var sSurfaces = arrTreatmentWork[i]._sSurfaces;
                            var sTreatment = "";
                            var sTreatmentShortCode = "";
                            var sDoctorName = "";
                            var jStatusBit = arrTreatmentWork[i]._jStatusBit;

                            var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                            var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
                            var arrDoctors = arrPrerequisiteData._arrDoctors;
                            for (var jTreatmentMaster = 0; jTreatmentMaster < arrTreatmentMaster.length; jTreatmentMaster++) {
                                if (suidTreatment == arrTreatmentMaster[jTreatmentMaster]._suid) {
                                    sTreatment = arrTreatmentMaster[jTreatmentMaster]._sName;
                                    sTreatmentShortCode = arrTreatmentMaster[jTreatmentMaster]._sShortCode;
                                    break;
                                }
                            }
                            for (var jDoctor = 0; jDoctor < arrDoctors.length; jDoctor++) {
                                if (suidDoctor == arrDoctors[jDoctor]._suid) {
                                    sDoctorName = "Dr. " + arrDoctors[jDoctor]._sNameFirst + " " + arrDoctors[jDoctor]._sNameLast;
                                    break;
                                }
                            }

                            arrTreatmentWorkDetails.push({
                                suidTreatmentWork: suidTreatmentWork,
                                sDate: sDate,
                                suidTreatment: suidTreatment,
                                sTreatment: sTreatment,
                                sTreatmentShortCode: sTreatmentShortCode,
                                sTeeth: sTeeth,
                                suidDoctor: suidDoctor,
                                sDoctorName: sDoctorName,
                                dAmount: dAmount,
                                dBillAmount: dBillAmount,
                                sTeethStructure: GetGraphicalRepresentationOfTeethForTreatment(arrTreatmentRecord[i] != undefined ? arrTreatmentRecord[i]._sTeeth.split(',') : "", ""),
                                dBalanceAmount: dBalanceAmount,
                                jTreatmentWork: jTreatmentWork,
                                sSurfaces: sSurfaces,
                                arrTreatmentRecord: arrTreatmentRecord
                            });

                        }
                    }

                }

                if ($.fn.DataTable.isDataTable("#tblCompletedTreatments")) {
                    $("#tblCompletedTreatments").DataTable().destroy();
                }
                var newHeight = $(window).height() - ($("#navHeader").height()) - 150;
                newHeight = newHeight - 150;
                $("#tblCompletedTreatments").empty();

                $("#tblCompletedTreatments").DataTable({
                    destroy: true,
                    scrollY: newHeight,
                    "aaData": arrTreatmentWorkDetails,
                    "bPaginate": true,
                    "bInfo": true,
                    "pagingType": "full_numbers",
                    "iDisplayLength": 10,
                    "ordering": true,
                    "bLengthChange": false,
                    "bFilter": true,
                    "language": {
                        "paginate": {
                            "first": "<<",
                            "last": ">>",
                            "next": ">",
                            "previous": "<"
                        }
                    },
                    "aoColumns": [
                        {
                            "sTitle": "suidTreatmentWork",
                            "mDataProp": "suidTreatmentWork",
                            "visible": false
                        }, {
                            "sTitle": "Treatment",
                            "mDataProp": "sTreatment",
                        }, {
                            "sTitle": "suidDoctor",
                            "mDataProp": "suidDoctor",
                            "visible": false
                        }, {
                            "sTitle": "Completion Date",
                            "mDataProp": "sDate",
                        }, {
                            "sTitle": "Doctor",
                            "mDataProp": "sDoctorName",
                        },
                        {
                            "sTitle": "Teeth",
                            "mDataProp": "sTeeth",
                            "visible": false
                        },
                         {
                             "sTitle": "Teeth",
                             "mDataProp": "sTeethStructure",
                         },
                        //{
                        //    "sTitle": "Actions",
                        //    width: "10%",
                        //    mRender: function (data, type, row) {
                        //        return [
                        //			'<a class="editTreatmentRecord btn-icon-edit mr-1" title="Edit Task" href="javascript:void(0)"><i class="fa fa-pencil"></i></a>',
                        //			'<a class="deleteTreatmentRecord btn-icon-delete" title="Delete Task" href="javascript:void(0)"><i class="fa fa-trash-o"></i></a>'
                        //        ].join(' ');
                        //    },
                        //    class: "dt-center"
                        //}
                    ],
                });
                $(".dataTables_scrollHeadInner").css("width", "100%");
                $(".dataTable").css("width", "100%");
            }
            else if (result._jResponseCode == 1) {

            }
        });
    });
    $("#aTabPatientHistory").click(function () {
        TeethSelectionStructureForDentalHist();
        ViewDentalHistoryResponse();
        ViewMedicalHistoryTimeline();
    });
    $("#aTabPrescriptions").click(function () {
        Prescription.Init();
    });
    $("#aTabAttachments").click(function () {
        GetAttachments();
    });
    $("#aTabLabWork").click(function () {
        LabWork.Init();
    });

    // Advice 
    $("#btnAdviceTEST").click(function () {
        $("#divAllTabPanel").hide();
        $("#divAddAdvice").show();
        $("#btnBackAddAdvice").show();
        $("#btnAddAdvice").hide();
        $("#btnSaveTreatmentWork").show();
        InitFormTreatmentWork();
    });
    $("#btnAddAdvice").click(function () {
        $("#divAllTabPanel").hide();
        $("#divAddAdvice").show();
        $("#btnBackAddAdvice").show();
        $(this).hide();
        $("#btnSaveTreatmentWork").show();
        InitFormTreatmentWork();
        ViewActiveTreatmentList();
    });
    $(".btnAddAdvice").click(function () {
        $("#divAllTabPanel").hide();
        $("#divAddAdvice").show();
        $("#btnBackAddAdvice").show();
        //$(this).hide();
        $("#btnSaveTreatmentWork").show();
        InitFormTreatmentWork();
        ViewActiveTreatmentList();
    });
    $("#btnBackAddAdvice").click(function () {
        //$("#divAllTabPanel").show();
        //$("#divAddAdvice").hide();
        //$("#btnBackAddAdvice").hide();
        //$("#btnSaveTreatmentWork").hide();
        //$("#btnAddAdvice").show();
        ViewTreatmentWorks();
    });
    $("#rdFixed").click(function () {
        var elItemContainer = elTeeth.closest(".divListItemTreatmentWork");
        $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").hide();
    });
    $("#rdTeethMultiply").click(function () {
        var elItemContainer = elTeeth.closest(".divListItemTreatmentWork");
        $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth").show();
    });
    $("#btnSaveTreatmentWork").click(function () {
        var jTreatmentType = T32App.T32LIB.Utility.TREATMENT_BITS.BIT_GENERAL;
        var dtTreatment = $("#dtTreatmentWork").val();
        var suidDoctor = $("#selTreatmentWorkDoctor").val();
        // Query Treatment List
        var arrListItemWorkSKVP = [];
        var arrElTreatmentWork = $("#divAddedTreatments").find(".divListItemTreatmentWork");
        for (var j = 0; j < arrElTreatmentWork.length; j++) {
            // Get TreatmentMaster Suid
            var suidTreatment = $(arrElTreatmentWork[j]).find(".card-title").attr("suidTreatment");
            // Get TeethBits,Surfaces
            var arrTeethBits = []; var arrTeethSurfaces = []; var arrSurfaceMixedWithTeethBits = [];

            var arrActiveTeeth = $(arrElTreatmentWork[j]).find("label.active");
            // check if teeth is added and surface list is checked
            if (arrActiveTeeth.length == 0) {
                T32App.Utility.MasterDataAlert("Please Select a Teeth for Treatment", "danger", 4000);
                return false;
            }
            for (var i = 0; i < arrActiveTeeth.length; i++) {
                $(arrActiveTeeth[i]).attr("toothSuids") != "" ? arrTeethBits.push($(arrActiveTeeth[i]).attr("toothSuids")) : [];
                $(arrActiveTeeth[i]).attr("addedSurfaces") != "" ? arrTeethSurfaces.push($(arrActiveTeeth[i]).attr("addedSurfaces")) : [];//"ÍÌ20Ì4,8,16,64,ÌÍ";        
            }
            var sTeethBits = arrTeethBits.length != 0 ? arrTeethBits.join(",") : "";
            var sSurface = arrTeethSurfaces.length != 0 ? arrTeethSurfaces.join(",") : "";
            if (sSurface != "") {
                arrSurfaceMixedWithTeethBits.push(SConcatWithSuitebleDelim([sTeethBits, sSurface]));
            }
            var dTreatmentAmount = Number($(arrElTreatmentWork[j]).find(".totalCostPerAdvice").text());
            if (dTreatmentAmount == 0 || dTreatmentAmount == undefined || dTreatmentAmount == "") {
                $(arrElTreatmentWork[j]).find(".txtTreatmentCost").FieldAlert("Enter amount");
                return false;
            }
            arrListItemWorkSKVP.push(SConcatWithSuitebleDelim([suidTreatment, sTeethBits, dTreatmentAmount, 0, SConcatWithSuitebleDelim(arrSurfaceMixedWithTeethBits)]));
        }
        if (suidDoctor != "" && suidDoctor != null && arrListItemWorkSKVP.length > 0 && dtTreatment != "") {
            var skvpTreatmentWork = SConcatWithSuitebleDelim(arrListItemWorkSKVP);
            treatmentDetails.CfnAddTreatmentWork(User.sSession, User.suid, Patient.suid, suidDoctor, skvpTreatmentWork, dtTreatment, jTreatmentType, function (result) {
                if (result._jResponseCode == 1) {
                    T32App.Utility.MasterDataAlert("Treatment advice can not be added", "danger", 4000);
                }
                else if (result._jResponseCode == 0) {
                    if (result._objResponse._arrTreatmentWork != null) {
                        T32App.Utility.MasterDataAlert("Treatment Advice Saved Successfully", "success", 4000);
                        var arrTreatmentWork = result._objResponse._arrTreatmentWork;
                        localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(arrTreatmentWork));
                        ViewTreatmentWorks();
                    }
                }
                else {
                    T32App.Utility.MasterDataAlert("Oops something went wrong. Please try again.", "danger", 4000);
                }
            });
        }
        else if (suidDoctor == "" || suidDoctor == null) {
            $("#selTreatmentWorkDoctor").FieldAlert("Please Select Doctor");
        }
        else if (arrListItemWorkSKVP.length == 0) {
            T32App.Utility.MasterDataAlert("Please Add Treatment Advice(s).", "danger", 3000);
        }
        else if (dtTreatment == "") {
            $("#dtTreatmentWork").FieldAlert("Please Enter Date");
        }
    });

    $("#radioRegularTreatments").click(function (e) {
        ShowAdviceTreatments("false");
    });
    $("#radioOtherTreatments").click(function (e) {
        ShowAdviceTreatments("true");
    });
    $("#radioShowAllTreatments").click(function (e) {
        ShowAdviceTreatments("all");
    });
    $("#btnAddSurface").click(function (e) {
        var checkedSurfaces = $("#surfaceList").find("input:checked");
        var surfaces = "";
        for (var i = 0; i < checkedSurfaces.length; i++) {
            var bitValue = $(checkedSurfaces[i]).attr("bitValue");
            surfaces = surfaces + bitValue + ",";
        }

        $tblCells = $("#divTreatmentAdvice").find("label");
        for (var i = 0; i < $tblCells.length; i++) {
            var attrActive = $($tblCells[i]).attr("activeNow");
            if (attrActive == "active") {
                $($tblCells[i]).attr("addedSurfaces", surfaces);
                $($tblCells[i]).attr("activeNow", "");
                break;
            }
        }

        $("#divTreatmentAdvice").removeClass("col-md-9");
        $("#divTreatmentAdvice").addClass("col-md-12");
        $("#divTeethSurfaceList").hide();
    })
    $("#btnAddTreatmentWorkRow").on("click", function () {
        $treatments = $("#divTreatmentCodes").find("input:checked");


        $tblCheckedCells = $("#divTreatmentAdvice").find("label.active");//.find("input:checked");

        var sTooth = "";
        var sBits = "";
        var arrBits = [];

        var arrSurface = [];
        var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
        var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);
        var dtBirth = kvps[6].sValue; // codeChange
        var diff = [];


        if (arrEntity != undefined) {
            var dtToday = new Date();
            var dtDOB = new Date(dtBirth.replace(/-/g, " "));
            diff = datediff(dtToday, dtDOB);
        }
        //$("#chkCheckAllTeethInTreatment").prop("checked", false);
        var jAge = diff[0];

        if ($treatments.length > 0) {
            for (var i = 0; i < $treatments.length; i++) {
                var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
                var sName = $($treatments[i]).attr("name");
                var isTeethSelectionNotRequired = $($treatments[i]).attr("isTeethSelectionNotRequired");
                if (isTeethSelectionNotRequired == "false") {
                    if ($tblCheckedCells.length > 0) {
                        for (var jTd = 0; jTd < $tblCheckedCells.length; jTd++) {

                            sTooth = $("#" + $tblCheckedCells[jTd].id).text();
                            sBits = $("#" + $tblCheckedCells[jTd].id).attr("toothsuids");
                            arrBits.push(sBits);
                            var sSurface = $("#" + $tblCheckedCells[jTd].id).attr("addedSurfaces");
                            if (sSurface != "") {
                                arrSurface.push(SConcatWithSuitebleDelim([sBits, sSurface]));
                            }
                        }
                    }
                    else {
                        T32App.Utility.TreatmentDataAlertMessage("Please select Tooth(teeth)", "danger", 3000);
                        return false;
                    }
                }

                $tr = $("<tr></tr>");

                $tdTreatment = $("<td style='vertical-align:middle;'><label class='suidTreatment sr-only'>" + $treatments[i].id + "</label>" + $treatments[i].value + "</td>");

                //for tooth representation:

                var sHTML = GetGraphicalRepresentationOfTeethForTreatment(arrBits, jAge);

                $tdTeeth = $("<td>" + sHTML + "<label class='sTeethBits sr-only'>" + arrBits + "</label><label class='sTeethSurfaces sr-only'>" + SConcatWithSuitebleDelim(arrSurface) + "</label></td>");

                $tdEstAmount = $("<td  style='vertical-align:middle;'></td>");
                var dAmount = $($($treatments[i])[0]).attr("price");
                $txtAmount = $("<input type='text' class='form-control txtNumeric'/>").val(dAmount)
				.on("keydown", function (e) {
				    // Allow: tab, escape, enter and .
				    if ($.inArray(e.keyCode, [9, 27, 13, 110, 190]) !== -1 ||
				        // Allow: Ctrl+A
						(e.keyCode == 65 && e.ctrlKey === true) ||
				        // Allow: home, end, left, right, down, up
						(e.keyCode >= 35 && e.keyCode <= 40)) {
				        // let it happen, don't do anything
				        return;
				    }
				    // Ensure that it is a number and stop the keypress
				    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode != 8 /*backspace*/) && (e.keyCode != 46 /*delete*/)) {
				        e.preventDefault();
				        //CalAdviceTotal();
				    }
				    else {
				        $(this).keyup(function () {
				            var jTextLength = $(this).val().length;

				            var sAmount = $(this).val();
				            var jDots = 0;

				            var regex = new RegExp(/\./g)
				            var count = sAmount.match(regex);
				            if (count) {
				                if (count.length > 1) {
				                    jDots = count.length;
				                }
				            }

				            if (jDots > 1) {
				                $(this).val(sAmount.substring(0, sAmount.lastIndexOf(".")));
				            }
				            else if (jTextLength < 8) {
				                CalAdviceTotal();
				            }
				            else {
				                var sSubString = $(this).val().substring(0, 7);
				                $(this).val(sSubString);
				                CalAdviceTotal();
				            }
				        });
				    }
				})
				.on("blur", function () {
				    if ($(this).val().trim() == "") {
				        $(this).val("0");
				    }
				})
				.focus(function () { $(this).select(); });
                $tdEstAmount.append($txtAmount);
                $btnRemoveRow = $("<button class='btn-xs btn-danger'>X</button>")
				.on("click", function () {
				    var jRows = $("#tBodyAdviceToBeSaved")[0].rows.length;
				    //$(this).parentNode();
				    if (jRows > 0) {
				        $(this).parent().parent().remove();
				        CalAdviceTotal();
				    }
				    if (jRows == 0) {
				        $("#txtTotal").val(0);
				    }
				});
                $tdRemoveRow = $("<td style='vertical-align:middle;'></td>").append($btnRemoveRow);
                $tr.append($tdTreatment).append($tdTeeth).append($tdEstAmount).append($tdRemoveRow);
                $("#tBodyAdviceToBeSaved").append($tr);
                CalAdviceTotal();
                arrBits = [];
            }

            $("#divTreatmentAdvice label").removeClass("active");
            $("#divTreatmentCodes input").attr("checked", false);
            $("#chkCheckAllTeethInTreatment").prop("checked", false);
            //txtTotal
            var jRows = $("#tBodyAdviceToBeSaved")[0].rows.length;
        }
        else {
            if ($treatments.length == 0) {
                T32App.Utility.TreatmentDataAlertMessage("Please select Treatment(s).", "danger", 3000);
            }
        }

    });
    $("#btnSaveTreatmentWorkDISABLED").on("click", function () {
        var suidDoctor = $("#selTreatmentWorkDoctor").val();

        var dtTreatment = $("#dtTreatmentWork").val();
        var jTreatmentType = T32App.T32LIB.Utility.TREATMENT_BITS.BIT_GENERAL;

        var skvpTreatmentWork = "";

        var arrTreatmentRowSkvp = [];

        $rows = $("#tBodyAdviceToBeSaved").find("tr");
        for (var j = 0; j < $rows.length; j++) {
            var suidTreatment = "";
            var sTeethBits = "";
            var dAmount = 0;
            var dAdvance = 0;
            var sSurface = "";
            suidTreatment = $($($rows[j])[0]).find("label")[0].innerText;

            sTeethBits = $($($rows[j])[0]).find("label")[1].innerText;

            dAmount = $($($rows[j])[0]).find("input")[0].value;
            sSurface = $($($rows[j])[0]).find("label")[2].innerText;
            var arrRowItems = [suidTreatment, sTeethBits, dAmount, dAdvance, sSurface];
            arrTreatmentRowSkvp.push(SConcatWithSuitebleDelim(arrRowItems));
        }
        if (suidDoctor != "" && arrTreatmentRowSkvp.length > 0 && dtTreatment != "") {
            skvpTreatmentWork = SConcatWithSuitebleDelim(arrTreatmentRowSkvp);

            treatmentDetails.CfnAddTreatmentWork(User.sSession, User.suid, Patient.suid, suidDoctor, skvpTreatmentWork, dtTreatment, jTreatmentType, function (result) {
                if (result._jResponseCode == 1) {
                    //alert("error");
                    T32App.Utility.TreatmentDataAlertMessage("Treatment advice can not be added.", "danger", 3000);
                }
                else if (result._jResponseCode == 0) {
                    //alert("success");
                    if (result._objResponse._arrTreatmentWork != null) {
                        T32App.Utility.TreatmentDataAlertMessage("Treatment Advice Saved Successfully.", "success", 3000);
                        var arrTreatmentWork = result._objResponse._arrTreatmentWork;
                        //var _arrTreatmentWork = JSON.parse(T32App.SessionStorage.GetItem("_arrTreatmentWork"));
                        //for (var j = 0; j < arrTreatmentWork.length; j++) {
                        //    _arrTreatmentWork.unshift(arrTreatmentWork[j]);
                        //}

                        localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(arrTreatmentWork));

                        ViewTreatmentWork();
                        ShowCreateTreatment();
                        var arrTreatmentWork = JSON.parse(localStorageDetails.GetItem("_arrTreatmentWork"));
                        $("#lblTreatmentNo").text("");
                        if (arrTreatmentWork.length != null) {
                            $("#lblTreatmentNo").text(arrTreatmentWork.length);
                        }
                    }
                }
                else {
                    //alert("Sorry there is technical problem. Please contact Administrator.");
                    T32App.Utility.TreatmentDataAlertMessage("Oops something went wrong. Please try again.", "danger", 3000);
                }
            });
        }
        else if (suidDoctor == "") {
            //alert("Please Select Doctor.");
            T32App.Utility.TreatmentDataAlertMessage("Please Select Doctor.", "danger", 3000);
        }
        else if (arrTreatmentRowSkvp.length == 0) {
            //alert("Please Select Treatment For Advice.");
            T32App.Utility.TreatmentDataAlertMessage("Please Add Treatment Advice(s).", "danger", 3000);
        }
        else if (dtTreatment == "") {
            T32App.Utility.TreatmentDataAlertMessage("Please Enter Date.", "danger", 3000);
        }
    });

    // Treatment Record  ------------------------------------- 
    $("#btnSaveTreatmentRecord").click(function () {
        //SaveTreatmentRecord();
        if ($("#divFormTreatmentRecord").css("display") == "none") {
            T32App.Utility.MasterDataAlert("Please Select a Teeth to add Record.", "warning", 4000);
        }
        SaveTreatmentRecordWithoutPayment();
    });
    $("#btnCancelTreatmentRecord").click(function () {
        ViewTreatmentWorks();
    });
    $("#btnDeleteTreatmentRecordOK").click(function () {
        var suidTreatmentRecordToDelete = $("#suidTreatmentRecordToDelete").text();
        treatmentDetails.CfnDeleteTreatmentRecord(User.sSession, User.suid, Patient.suid, suidTreatmentRecordToDelete, function (result) {
            if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_arrTreatmentWork", JSON.stringify(result._objResponse._arrTreatmentWork));
                ViewTreatmentWorks();
                $("#dlgTreatmentRecordDeleteConfirmation").modal("hide");
                T32App.Utility.MasterDataAlert("Record deleted successfully", "success", 4000);
            }
            else {
                T32App.Utility.MasterDataAlert(result._sResponseInfo, "danger", 3000);
            }
        })
    });
    $("#btnDeleteTreatmentRecordCancel").click(function () {
        $("#dlgTreatmentRecordDeleteConfirmation").modal("hide");
    });

    // Medical History
    //  |_ Allergy 
    $('#txtAllergy').tokenfield();
    $("#txtAllergy").on("blur", function () {
        var sDrugAllergy = $('#txtAllergy-tokenfield').val();
        if (sDrugAllergy != "" && sDrugAllergy != undefined) {
            var arrAllergy = (sDrugAllergy).split(",");
            var txtAllergy = $("#txtAllergy").val();
            var arr = txtAllergy.split(",");
            if (arr.length != 0) {
                for (var i = 0; i < arr.length; i++) {
                    arrDrugAllergy.push(arr[i]);
                }
            }
            $("#txtAllergy-tokenfield").val("");
            $("#txtAllergy").tokenfield("setTokens", arrDrugAllergy);
        }
    });
    $("#btnSaveMedicineAllergyMap").click(function () {
        var arrAllergy = $("#selMedicine").multipleSelect("getSelects");
        if (arrAllergy.length == 0) { $("#selMedicine").FieldAlert("Please select medicines"); return false };
        var sAllergySuid = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrAllergies[0]._suid;
        var arrElAllAllergicMedicines = $(document).find("#elAllergyStatus").next().find(".dropdown-item")
                                                   .filter(function (j, allergy) { return j != 0 });
        var arrMedicineAllergy = arrAllergy.map(function (med, j) {
            var arr = [];
            arr.push(med, sAllergySuid);
            var arrSKVP = SConcatWithSuitebleDelim(arr);
            return arrSKVP;
        });
        for (var i = 0; i < arrElAllAllergicMedicines.length; i++) {
            arrMedicineAllergy.push(SConcatWithSuitebleDelim([$(arrElAllAllergicMedicines[i]).attr("suidMedicine"), sAllergySuid]));
        }
        var skvpMedicineAllergy = SConcatWithSuitebleDelim(arrMedicineAllergy);
        allergy.CfnAddMedicineAllergy(User.sSession, User.suid, Patient.suid, skvpMedicineAllergy, function (result) {
            if (result._jResponseCode == 1) {
            }
            else if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_medicalHistory", JSON.stringify(result._objResponse._medicalHistory));
                Patient.oMedicalHistory = result._objResponse._medicalHistory;
                patientDetails.CfnGetMedicalHistory(User.sSession, User.suid, Patient.suid, function (result) {
                    if (result._jResponseCode == 0) {
                        Patient.oMedicalHistory = result._objResponse._medicalHistory;
                        Patient.ViewAllergyStatus();
                        ViewMedicalHistoryTimeline();
                        $("#dlgCreateMedicineAllergyMap").modal("hide");
                    }
                    else {
                        Patient.oMedicalHistory = null
                        Patient.ViewAllergyStatus();
                        ViewMedicalHistoryTimeline();
                        $("#dlgCreateMedicineAllergyMap").modal("hide");
                    }

                });
                $("#divFormMedicalHistory").hide();
                $("#divPatientHistory").show();
                T32App.Utility.MasterDataAlert("Allergic Medicines Saved Successfully", "success", 4000);
            }
        });

    });
    $("#btnCancelMedicineAllergyMap").click(function () {
        $("#dlgCreateMedicineAllergyMap").modal("hide");
    });
    $("#btnTreatmentMedicalHistory").click(function () {
        $("#divPatientHistory").hide();
        $("#divFormMedicalHistory").show();
        ShowMedicalHistoryDialog();
    });
    $("#btnSaveMedicalHist").click(function () {
        var suidMedicalHistory = $("#suidMedicalHistory").val().trim();
        var sDrugsAllergy = $("#txtDrugdAllergy").val().trim();
        var sBloodDisorder = $("#txtBloodDisorder").val().trim();
        var sMedication = $("#txtMedication").val().trim();
        var sCardiacStatus = $("#selCardiacStatus").val();

        var chkPregnancy = $("#chkPregnancy").is(":checked") ? "Pregnancy" : "";
        var diseases = $("#txtDiseases1").val();
        var sDiseases = ""
        if (chkPregnancy != "") {
            sDiseases = diseases + "," + chkPregnancy;
        }
        else {
            sDiseases = diseases;
        }

        var sOtherDiseases = $("#txtOtherDiseases").val().trim();
        var sFamilyPhysician = $("#txtFamilyPhysician").val().trim();
        var sPhysicianContactNo = $("#txtPhysicianContactNo").val().trim();
        var dtMedicalHistory = $("#dtMedicalHistory").val();

        //var suidEntity = JSON.parse($("#cmbEntityRole").val())._suidEntity;
        //var suidPatientEntity = JSON.parse(localStorageDetails.GetItem("patientInfo"))._suidEntity;

        if (sPhysicianContactNo != "") {
            var arrPhNo = sPhysicianContactNo.split(",");
            for (var i = 0; i < arrPhNo.length; i++) {
                if (isNaN(arrPhNo[i])) {
                    T32App.Utility.TreatmentDataAlertMessage("Enter Valid Phone Number", "danger", 10000);
                    $("#txtPhysicianContactNo").focus();
                    return;
                }
                if (arrPhNo[i].length < 10 || arrPhNo[i].length > 15) {
                    T32App.Utility.TreatmentDataAlertMessage("Enter Valid Phone Number", "danger", 3000);
                    $("#txtPhysicianContactNo").focus();
                    return false;
                }
            }
        }

        patientDetails.CfnAddMedicalHistory(User.sSession, User.suid, Patient.suid, suidMedicalHistory, dtMedicalHistory, sDrugsAllergy, sBloodDisorder, sMedication, sCardiacStatus, sDiseases, sOtherDiseases, sFamilyPhysician, sPhysicianContactNo, function (result) {
            if (result._jResponseCode == 1) {
            }
            else if (result._jResponseCode == 0) {
                localStorageDetails.SetItem("_medicalHistory", JSON.stringify(result._objResponse._medicalHistory));
                Patient.oMedicalHistory = result._objResponse._medicalHistory;
                patientDetails.CfnGetMedicalHistory(User.sSession, User.suid, Patient.suid, function (result) {
                    if (result._jResponseCode == 0) {
                        Patient.oMedicalHistory = result._objResponse._medicalHistory;
                        ViewMedicalHistoryTimeline();
                    }
                    else {
                        Patient.oMedicalHistory = null;
                    }

                });
                $("#divFormMedicalHistory").hide();
                $("#divPatientHistory").show();
                T32App.Utility.MasterDataAlert("Medical History Saved Successfully.", "success", 4000);
            }
        });
    });
    $("#btnCancelMedicalHistory").click(function () {
        $("#divFormMedicalHistory").hide();
        $("#divPatientHistory").show();
    });

    // Prescribe Medicines
    $('#btnAddPrescriptionRow').click(function () {
        Prescription.AddRow();
    });
    $("#chkCreateTemplate").click(function () {
        if ($(this).is(":checked")) {
            $("#divFormPrescribeMedicine .TemplateInfo").show();
        }
        else {
            $("#divFormPrescribeMedicine .TemplateInfo").hide();
        }
    });
    $('#btnSavePrescription').click(function () {
        var arrElRowPrescriptionTemplates = $(".tblPrescription").find("tbody tr");

        if (arrElRowPrescriptionTemplates.length != 0) {
            var arrPrescriptionTemplates = [];
            for (var j = 0; j < arrElRowPrescriptionTemplates.length; j++) {
                var elPrescription = arrElRowPrescriptionTemplates[j]

                var suidMedicineType = $(elPrescription).find(".medicineType option:selected").attr("suidMedicineType")
                var suidMedicine = $(elPrescription).find(".medicine option:selected").attr("suidMedicine")
                var instr = $(elPrescription).find(".instruction input").val()
                var units = $(elPrescription).find(".units input").val()
                var dosage = $(elPrescription).find(".dosage option:selected").val()
                var schedule = $(elPrescription).find(".schedule option:selected").val()
                var days = $(elPrescription).find(".days input").val()
                var totalDose = $(elPrescription).find(".totalDose").text()
                if (suidMedicineType == undefined) {
                    T32App.Utility.MasterDataAlert("Select MedicineType", "danger", 4000)
                    return false;
                }
                if (suidMedicine == undefined) {
                    T32App.Utility.MasterDataAlert("Select Medicine", "danger", 4000)
                    return false;
                }
                if (instr == "") {
                    T32App.Utility.MasterDataAlert("Enter some Instruction", "danger", 4000)
                    $(elPrescription).find(".instruction input").focus()
                    return false;
                }
                if (units == undefined || units == "") {
                    T32App.Utility.MasterDataAlert("Enter quantity of medicine", "danger", 4000)
                    return false;
                }
                if (dosage == undefined) {
                    T32App.Utility.MasterDataAlert("Enter dosage value", "danger", 4000)
                    return false;
                }
                if (schedule == undefined) {
                    T32App.Utility.MasterDataAlert("Select schedule", "danger", 4000)
                    return false;
                }
                if (days == undefined || days == "") {
                    T32App.Utility.MasterDataAlert("Enter days for dosage", "danger", 4000)
                    return false;
                }
                var arrRowItems = [suidMedicine, units, dosage, schedule, days, instr, suidMedicineType];
                var sRowItemsSkvp = SConcatWithSuitebleDelim(arrRowItems);
                arrPrescriptionTemplates.push(sRowItemsSkvp);

            }

            var skvpDoctors = "";
            var fChecked = $("#chkCreateTemplate").is(":checked");
            if (fChecked) {
                if ($("#txtCreatePrescriptionTemplate").val() == "") {
                    T32App.Utility.FormFieldAlert("txtCreatePrescriptionTemplate", "Enter Template Name", 3000);
                    return false;
                }
                if ($("#txtPrescriptionTemplateOrder").val() == "") {
                    T32App.Utility.FormFieldAlert("txtPrescriptionTemplateOrder", "Enter Order number", 3000);
                    return false;
                }
                var arrSuidDoctors = $("#selPrescriptionTemplateDoctor").multipleSelect("getSelects");
                if (arrSuidDoctors.length > 0) {
                    skvpDoctors = SConcatWithSuitebleDelim(arrSuidDoctors);
                }
                if (skvpDoctors == "") {
                    T32App.Utility.FormFieldAlert("selPrescriptionTemplateDoctor", "Select Doctor(s)", 3000);
                    return false;
                }
            }

            var sPrescriptionTemplate = $("#txtCreatePrescriptionTemplate").val().trim();
            var jOrder = $("#txtPrescriptionTemplateOrder").val().trim();
            var jTemplateBits = 1;
            if (fChecked) {
                sPrescriptionTemplate == "" || skvpDoctors == "" ? fChecked = false : fChecked = true;
                jTemplateBits = T32App.T32LIB.Utility.PRESCRIPTION_BITS.BIT_TEMPLATE;
            }
            else {
                sPrescriptionTemplate = "general";
                fChecked = true;
                jTemplateBits = T32App.T32LIB.Utility.PRESCRIPTION_BITS.BIT_GENERAL;
            }

            if (arrPrescriptionTemplates.length != 0 && fChecked == true) {
                sPrescriptionSkvp = SConcatWithSuitebleDelim(arrPrescriptionTemplates);

                sName = $("#").val();
                age = $("#").val();
                gender = $("#").val();
                var fOnlyTemplate = false;
                var suidPrescription = $("#suidPrescriptionTemplate").text();
                if (suidPrescription == undefined) {
                    suidPrescription = ""
                }
                var jOrder = 0;
                if (jTemplateBits == T32App.T32LIB.Utility.PRESCRIPTION_BITS.BIT_TEMPLATE) {
                    jOrder = -1;
                }
                prescription.CfnAddPrescription(User.sSession, User.suid, Patient.suid, suidPrescription, sPrescriptionTemplate, jTemplateBits, fOnlyTemplate, jOrder, skvpDoctors, sPrescriptionSkvp, function (result) {
                    ShowLoader(false);
                    if (result._jResponseCode == 1) {
                        T32App.Utility.MasterDataAlert(result._sResponseInfo, "danger", 4000);
                    }
                    else if (result._jResponseCode == 0) {
                        setTimeout(function () {
                            T32App.Utility.MasterDataAlert("Prescription Created successfully", "success", 4000);
                            var arrPrescriptions = JSON.parse(window.localStorage.getItem("_arrPrescriptions"));
                            $("#lblPrescriptionNo").text("");
                            if (arrPrescriptions.length != null) {
                                $("#lblPrescriptionNo").text(arrPrescriptions.length);
                            }

                            var arrPrerequisiteData = JSON.parse(localStorageDetails.GetItem("PrerequisiteData"));
                            var arrPrescriptionsTemplate = arrPrerequisiteData._arrPrescriptionTemplates;
                            $("#lblPrescriptionTemplateNo").text("");
                            if (arrPrescriptionsTemplate.length != null) {
                                $("#lblPrescriptionTemplateNo").text(arrPrescriptionsTemplate.length);
                            }
                        }, 2000);
                        $("#dlgCreatePrescription").modal("hide");
                        $("#txtUnit").val("");
                        $("#txtNoOfDays").text("");
                        $("#dlgPrescriptionBody").html("");
                        var _arrPrescriptions = result._objResponse._arrPrescriptions;
                        localStorageDetails.SetItem("_arrPrescriptions", JSON.stringify(_arrPrescriptions));
                        userService.CfnGetPrerequisiteData(function (result) {
                            if (JSON.parse(localStorageDetails.GetItem("PrerequisiteData"))._arrDummyPatients[0]._suid != Patient.suid) {
                                CreateDataTblPreviousPrescriptions();
                            }
                            else {
                                CreateDataTblPreviousPrescriptions();
                            }
                        });
                        var suidPrescription = result._objResponse._suid;
                        ShowLoader(true);

                        var jLeft = (screen.width / 2) - (750 / 2);
                        var jTop = (screen.height / 2) - (650 / 2);

                        strUrl = "Reports/PrescriptionReport.aspx?entityId=" + Patient.suid + "&prescriptionId=" + suidPrescription + "&sName=" + Patient.sName + "&age=" + Patient.jAge + "&gender=" + "male", ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes';

                        window.open(strUrl);


                        //window.location.assign("Reports/PrescriptionReport.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + result._objResponse._suidPrescription + "&sName=" + sName + "&age=" + age + "&gender=" + gender, ' resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=yes');


                        //window.open("Reports/Prescription.aspx?entityId=" + suidTargetEntity + "&prescriptionId=" + suidPrescription + "&sName=" + sPatienName + "&age=" + jAge + "&gender=" + sGender, "_blank");
                        setTimeout(function () {
                            ShowLoader(false);
                        }, 2000);

                        //if (isFromCreatePrescription == false) {
                        //    var suidTreatmentWorkRecord = T32App.SessionStorage.GetItem("T32AddTreatmentWorkRecordResp");
                        //    CreateBillDialog("", suidTreatmentWorkRecord, 0, "");
                        //}
                    }
                    else {
                        T32App.Utility.MasterDataAlert("Something went wrong. Please try again.", "danger", 4000);
                        $("#dlgCreatePrescription").modal("hide");
                    }
                });
            }
            else {
                if (sError != "") {
                    T32App.Utility.ModalAlertMessage(sError, "danger", 3000);
                    $("#" + sControlElement).focus();
                }
                else if (sError == "" && fChecked) {
                    T32App.Utility.ModalAlertMessage("Please Prescribe Medicines.", "danger", 3000);
                }
                else if (!fChecked) {
                    if (sPrescriptionTemplate == "") {
                        T32App.Utility.ModalAlertMessage("Please Enter Template Name.", "danger", 3000);
                    }
                    else if (skvpDoctors == "") {
                        T32App.Utility.ModalAlertMessage("Please Select Doctor(s).", "danger", 3000);
                    }
                }
            }
        }
    });
    $('#btnViewPrescriptionTemplates').click(function () {
        $("#divFormPrescribeMedicine").hide();
        $("#divTblPreviousPrescriptions").hide();
        $("#divTblPrescriptionTemplates").show();
        CreateDataTblPrescriptionTemplate("");
    });
    $('#btnViewPreviousPrescriptions').click(function () {
        $("#divFormPrescribeMedicine").hide();
        $("#divTblPrescriptionTemplates").hide();
        $("#divTblPreviousPrescriptions").show();
        CreateDataTblPreviousPrescriptions();
    });
    $("#btnClosePrescription").click(function () {
        $("#dlgViewPrescription").modal("hide");
    });
    // Labs
    $("#btnSaveJob").click(function () {

        var arrTeeth = [];
        $tblCheckedCells = $("#divTeethStructure").find("label.active");//.find("input:checked");
        var sBits = "";
        for (var jTd = 0; jTd < $tblCheckedCells.length; jTd++) {

            sTooth = $("#" + $tblCheckedCells[jTd].id).text();
            sBits = $("#" + $tblCheckedCells[jTd].id).attr("toothsuids");
            arrTeeth.push(sBits);
        }
        var sTeeth = "";

        sTeeth = arrTeeth.join(",");
        var sEntityTarget = $("#suidJob").val();

        var sEntity = userService.GetLoginResponse()._objResponse._entityDetails[0]._suidEntity;

        var suidPatient = $("#suidPatient").val();
        var suidLab = $("#selLab").find("option:selected").prop("value");
        var dtJobTaken = $("#dtJobEntry").val();
        var dtJobExpected = $("#dtExpectedDelivery").val();
        var dtJobComplited = $("#dtActualDelivery").val();
        var jobType = $("#selJobType").find("option:selected").prop("value");
        var sDescription = $("#txtJobDescription").val();
        var jJobStatus = $('input[name=status]:checked').val();
        var dAmount = $("#txtAmount").val();
        var btnText = $("#btnSaveJob").val();

        var sPatientName = $("#txtPatientDetails").val()
        if (suidPatient == "") {
            T32App.Utility.FormFieldAlert("txtPatientDetails", "Patient not added", 3000)
            return false;
        }
        //if (suidPatient =="" || sPatientName == "") {
        //    T32App.Utility.FormFieldAlert("txtPatientDetails", "Patient not added", 3000)
        //    $("#txtPatientDetails").focus();
        //    return false;
        //}

        if (jobType == "") {
            //T32App.Utility.ModalAlertMessage("Select Job Type", "danger", 3000);
            T32App.Utility.FormFieldAlert("selJobType", "Select Job Type", 3000)
            $("#selJobType").focus();
            //valid = 1;
            return;
        }

        if (suidLab == "") {
            //T32App.Utility.ModalAlertMessage("Select Lab", "danger", 3000);
            T32App.Utility.FormFieldAlert("selLab", "Select Lab", 3000)
            $("#selLab").focus();
            //valid = 1;
            return;
        }

        if (sTeeth == "") {
            //T32App.Utility.ModalAlertMessage("Select Teeth For Work", "danger", 3000);
            T32App.Utility.MasterDataAlert("Select Teeth For Work", "danger", 3000)
            $("#divTeethStructure").focus();
            //valid = 1;
            return;
        }

        if (dtJobTaken == "") {
            //T32App.Utility.ModalAlertMessage("Select Job Entry Date", "danger", 3000);
            T32App.Utility.FormFieldAlert("dtJobEntry", "Select Job Entry Date", 3000)
            $("#dtJobEntry").focus();
            //valid = 1;
            return;
        }

        if (dtJobExpected == "") {
            //T32App.Utility.ModalAlertMessage("Select Expected Delivery Date", "danger", 3000);
            T32App.Utility.FormFieldAlert("dtExpectedDelivery", "Select Expected Delivery Date", 3000)
            $("#dtExpectedDelivery").focus();
            //valid = 1;
            return;
        }

        if (dtJobComplited == "") {
            //T32App.Utility.ModalAlertMessage("Select Job Complition Date", "danger", 3000);
            T32App.Utility.FormFieldAlert("dtActualDelivery", "Select Job Complition Date", 3000)
            $("#dtActualDelivery").focus();
            //valid = 1;
            return;
        }

        // codeChange
        if (dAmount == "" || dAmount == 0) {
            //T32App.Utility.ModalAlertMessage("Please Enter the Amount", "danger", 3000);
            T32App.Utility.FormFieldAlert("txtAmount", "Please Enter the Amount", 3000)
            $("#txtAmount").focus();
            return;
        }
        //

        if (btnText == "Save" && jJobStatus == "4") {
            T32App.Utility.MasterDataAlert("Job Status Cannot be Done When New Job Adding", "danger", 3000);
            $("#divTeethStructure").focus();
            //valid = 1;
            return;
        }
        $("#btnSaveJob").attr("disabled", true).css({ cursor: "not-allowed" });
        labWork.CfnAddJob(userService.GetLoginResponse()._objResponse._sSession, sEntity, sEntityTarget, suidPatient, suidLab, dtJobTaken, dtJobExpected, dtJobComplited, jobType, sTeeth, sDescription, jJobStatus, dAmount, function (result) {
            if (result._jResponseCode == 1) {
                T32App.Utility.MasterDataAlert("Something went wrong.Please try again later.", "danger", 3000);
                //$("#customAlertModal").modal("show");
                //$("#btnAddJob").attr("disabled", false).css({ cursor: "pointer" });
                UpdateTasksToPending();
            }
            else {

                T32App.Utility.MasterDataAlert("Job Added Successfully", "success", 4000);
                UpdateTasksToPending();
                $("#divFormJob").hide();
                $("#divTblJobs").show();
                LabWork.Init();
                $("#btnSaveJob").attr("disabled", false).css({ cursor: "pointer" });

            }
        });

    });
    $("#btnCancelJob").click(function () {
        $("#divFormJob").hide();
        $("#divTblJobs").show();
    });
});

function GetElTeethStructureAdult(arrAdultTeeth, fShowImage) {
    var arrTeeth = arrAdultTeeth;
    var width = 25, height = 40;
    var sDiv = "#divTeethStructure_Advice";
    $container = $('<div col-md-12 p-0></div>');
    $tbl = $("<table class='col-md-12'></table>");
    $tblBody = $("<tbody></tbody>");

    $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    var toothId = "toothAdult";
    if (sDiv == "#divTeethStructure_Advice") {
        toothId = toothId + "Treat";
    }
    for (var i = 0; i <= 15; i++) {
        if (i == 7) {
            $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
        }
        else {
            $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
        }
        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' data-toggle='popover' class='btn btn-default teeth elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces='' activeNow=''><img src='" + arrTeeth[i]._sPath + "' width=" + width + " height=" + height + " /><br />" + arrTeeth[i]._sNotation + "</label>");
        }
        else {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' data-toggle='popover' class='btn btn-default teeth elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces='' activeNow=''>" + arrTeeth[i]._sNotation + "</label>");
        }
        $td.append($btn);

        $trUpper.append($td);
    }
    $tblBody.append($trUpper).append("<br/>");


    $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    for (var i = 16; i <= 31; i++) {
        if (i == 23) {
            $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='height:auto;'></td>");
        }

        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default teeth elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=" + width + " height=" + height + " /></label>");
        }
        else {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default teeth elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
        }

        $td.append($btn);
        $trLower.append($td);
    }
    $tblBody.append($trLower);
    $tbl.append($tblBody);
    $container.append($tbl);
    return $($container).html();
}
function GetElTeethStructureChild(arrChildTeeth, fShowImage) {
    var arrTeeth = arrChildTeeth;
    var width = 25, height = 40;
    var sDiv = "#divTeethStructure_Advice";
    $container = $('<div col-md-12 p-0></div>');
    $tbl = $("<table class='col-md-12'></table>");
    $tblBody = $("<tbody></tbody>");

    $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");

    for (var i = 0; i <= 9; i++) {
        if (i == 4) {
            $td = $("<td style='border-bottom:solid black 2px;border-right:solid black 2px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='border-bottom:solid black 2px;height:auto;'></td>");
        }


        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=50 /><br />" + arrTeeth[i]._sNotation + "</label>");
        }
        else {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''>" + arrTeeth[i]._sNotation + "</label>");
        }
        $td.append($btn);
        $trUpper.append($td);
    }
    $tblBody.append($trUpper).append("<br/>");


    $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    for (var i = 10; i <= 19; i++) {
        if (i == 14) {
            $td = $("<td style='border-right:solid black 2px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='height:auto;'></td>");
        }

        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=50 /></label>");
        }
        else {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' class='btn btn-default elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeeth[i]._sSurface + "' addedSurfaces=''>" + arrTeeth[i]._sNotation + "</label>");
        }

        $td.append($btn);
        $trLower.append($td);
    }
    $tblBody.append($trLower);
    $tbl.append($tblBody);
    $container.append($tbl);
    return $($container).html();
}
function GetElTeethStructureMix(arrTeethAdult, arrTeethChild, fShowImage) {
    var width = 25, height = 33;
    var sDiv = "#divTeethStructure_Advice";
    $container = $('<div col-md-12 p-0></div>');
    $tbl = $("<table class='col-md-12'></table>");
    $tblBody = $("<tbody></tbody>");
    ////Upper row adult
    $trUpperAdult = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    var toothId = "toothAdult";
    if (sDiv == "#divTeethStructure_Advice") {
        toothId = toothId + "Treat";
    }
    for (var i = 0; i <= 15; i++) {
        if (i == 7) {
            $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
        }
        else {
            $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
        }
        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeethAdult[i]._suidTeeth + "' position='" + arrTeethAdult[i]._jPosition + "' class='btn btn-default teeth elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:10px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeethAdult[i]._sSurface + "' addedSurfaces=''><img src='" + arrTeethAdult[i]._sPath + "' width=" + width + " height=" + height + " /><br />" + arrTeethAdult[i]._sNotation + "</label>");
        }
        else {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeethAdult[i]._suidTeeth + "' position='" + arrTeethAdult[i]._jPosition + "' class='btn btn-default teeth elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeethAdult[i]._sSurface + "' addedSurfaces=''>" + arrTeethAdult[i]._sNotation + "</label>");
        }
        $td.append($btn);

        $trUpperAdult.append($td);
    }
    $tblBody.append($trUpperAdult).append("<br/>");

    ///Upper row for child
    $trUpperChild = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    for (var i = 0; i <= 9; i++) {
        if (i == 4) {
            $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='border-bottom:solid black 1px;height:auto;'></td>");
        }

        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeethChild[i]._suidTeeth + "' position='" + arrTeethChild[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:10px;border:none;border-radius: 0;' treats='' surfaces='" + arrTeethChild[i]._sSurface + "' addedSurfaces=''><img src='" + arrTeethChild[i]._sPath + "' width=" + width + " height=" + height + " /><br />" + arrTeethChild[i]._sNotation + "</label>");
        }
        else {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeethChild[i]._suidTeeth + "' position='" + arrTeethChild[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border-radius: 0;' treats='' surfaces='" + arrTeethChild[i]._sSurface + "' addedSurfaces=''>" + arrTeethChild[i]._sNotation + "</label>");
        }


        $td.append($btn);
        $trUpperChild.append($td);
    }
    $tblBody.append($trUpperChild).append("<br/>");

    ////Lower for child
    $trLowerChild = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    for (var i = 10; i <= 19; i++) {
        if (i == 14) {
            $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='height:auto;'></td>");
        }

        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeethChild[i]._suidTeeth + "' position='" + arrTeethChild[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:10px;border:none;' treats='' surfaces='" + arrTeethChild[i]._sSurface + "' addedSurfaces=''>" + arrTeethChild[i]._sNotation + "<br /><img src='" + arrTeethChild[i]._sPath + "' width=" + width + " height=" + height + " /></label>");
        }
        else {
            $btn = $("<label id='toothChild" + (i + 1) + "' toothSuids='" + arrTeethChild[i]._suidTeeth + "' position='" + arrTeethChild[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats='' surfaces='" + arrTeethChild[i]._sSurface + "' addedSurfaces=''>" + arrTeethChild[i]._sNotation + "</label>");
        }

        $td.append($btn);
        $trLowerChild.append($td);
    }
    $tblBody.append($trLowerChild).append("<br/>");
    ////Lower for adult
    $trLowerAdult = $("<tr class='btn-group' data-toggle='buttons'></tr>");
    for (var i = 16; i <= 31; i++) {
        if (i == 23) {
            $td = $("<td style='border-right:solid black 1px;border-top:solid black 1px;height:auto;'></td>");
        }
        else {
            $td = $("<td style='border-top:solid black 1px;height:auto;'></td>");
        }

        if (fShowImage == true || fShowImage == "true") {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeethAdult[i]._suidTeeth + "' position='" + arrTeethAdult[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:10px;border:none;' treats='' surfaces='" + arrTeethAdult[i]._sSurface + "' addedSurfaces=''>" + arrTeethAdult[i]._sNotation + "<br /><img src='" + arrTeethAdult[i]._sPath + "' width=" + width + " height=" + height + " /></label>");
        }
        else {
            $btn = $("<label id='" + toothId + (i + 1) + "' toothSuids='" + arrTeethAdult[i]._suidTeeth + "' position='" + arrTeethAdult[i]._jPosition + "' class='btn btn-default elLblTooth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats='' surfaces='" + arrTeethAdult[i]._sSurface + "' addedSurfaces=''>" + arrTeethAdult[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
        }
        $td.append($btn);
        $trLowerAdult.append($td);
    }
    $tblBody.append($trLowerAdult);
    $tbl.append($tblBody);
    $container.append($tbl);
    return $($container).html();
}
function GetElSurfaces(sSurfaces) {
    var arrSurfaces = sSurfaces.split(',');
    var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
    var arrElSurfaces = [];
    for (var i = 0; i < arrSurfaces.length; i++) {
        var bit = arrSurfaces[i];
        var sSurfaceName = "";
        if (bit == lib.Utility.TEETHSURFACE.BIT_INCISAL) {
            sSurfaceName = "Incisal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_OCCLUSAL) {
            sSurfaceName = "Occusal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_MESIAL) {
            sSurfaceName = "Mesial";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_DISTAL) {
            sSurfaceName = "Distal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_BUCCAL) {
            sSurfaceName = "Buccal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_LABIAL) {
            sSurfaceName = "Labial";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_PALATAL) {
            sSurfaceName = "Palatal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_LINGUAL) {
            sSurfaceName = "Lingual";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_CERVICAL) {
            sSurfaceName = "Cervical";
        }
        var elCheckbox = '<fieldset style="float:left" class="mr-1">\
                            <label class="custom-control custom-checkbox display-table">\
                                <input class="custom-control-input toothSurface" id="chkPrescribed" type="checkbox" name="chkSurfaces" bitValue="' + bit + '" >\
                                <span class="custom-control-indicator login-check"></span>\
                                <span class="custom-control-description m-0">' + sSurfaceName + '</span>\
                            </label>\
                          </fieldset>'
        //$chkSurface = "<label class='checkbox-inline'><input type='checkbox' name='chkSurfaces' bitValue='" + bit + "' />" + sSurfaceName + "</label>";
        arrElSurfaces.push(elCheckbox);
    }
    return arrElSurfaces;
}
$(document).on("click", ".elLblTooth", function () {
    var elTeeth = $(this);
    var sSurface = elTeeth.attr("surfaces");
    var elChkSurfaces = $("<div class='col-md-12 p-0 mt-1 elChkSurfaces'></div>");
    var btnAddSurfaces = $("<button class='btn btn-sm btn-outline-warning btnAddSurfaceToTooth'></button>");
    $(elTeeth).closest(".divTeethStructure_Advice").find(".elChkSurfaces").remove();
    $(elTeeth).closest(".divTeethStructure_Advice").append($(elChkSurfaces).html("").append("<div class='col-md-12 p-0'><label class='control-label'><strong>Surfaces</strong></label></div>").append(GetElSurfaces(sSurface)));

    var divTeeth = $(elTeeth).closest(".divTeethStructure_Advice").find('label.active');
    var noOfSelecedTeeth = divTeeth.length;

    var elItemContainer = elTeeth.closest(".divListItemTreatmentWork");
    var dCostPerTooth = Number($(elItemContainer).find(".costPerTooth").text());
    var elTxtCost = $(elItemContainer).find(".txtTreatmentCost");
    var elTxtTeethCount = $(elItemContainer).find(".txtTreatmentCostMultipliedWithTeeth");
    var sTotalCostPerAdvice = $(elItemContainer).find(".divTotalCostPerAdvice .totalCostPerAdvice");

    if (elItemContainer.find(".rdFixed").is(":checked")) {
        if (!elTeeth.hasClass("active")) {
            //TotalAdviceAmountCounter.UpdateAmntADD(dCostPerTooth);
            //elTxtCost.val(dCostPerTooth * (noOfSelecedTeeth + 1));
            //elTxtTeethCount.val(noOfSelecedTeeth + 1);
            //sTotalCostPerAdvice.text(elTxtCost.val());
        }
        else {
            //TotalAdviceAmountCounter.UpdateAmntSUB(dCostPerTooth);
            //elTxtCost.val(dCostPerTooth * (noOfSelecedTeeth - 1));
            //elTxtTeethCount.val(noOfSelecedTeeth - 1);
            //sTotalCostPerAdvice.text(elTxtCost.val());

        }
    }

    else if (elItemContainer.find(".rdTeethMultiply").is(":checked")) {
        if (!elTeeth.hasClass("active")) {
            //TotalAdviceAmountCounter.UpdateAmntADD(dCostPerTooth);
            elTxtCost.val(dCostPerTooth);
            elTxtTeethCount.val(noOfSelecedTeeth + 1);
            sTotalCostPerAdvice.text(dCostPerTooth * (noOfSelecedTeeth + 1));
        }
        else {
            //TotalAdviceAmountCounter.UpdateAmntSUB(dCostPerTooth);
            elTxtCost.val(dCostPerTooth);
            elTxtTeethCount.val(noOfSelecedTeeth - 1);
            sTotalCostPerAdvice.text(dCostPerTooth * (noOfSelecedTeeth - 1));

        }
    }

    TotalAdviceAmountCounter.UpdateTotalTreatmentWorkAmount();

});
$(document).on("click", ".toothSurface", function () {
    var elToothSurface = $(this);
    var arrElAllSurfaces = elToothSurface.closest(".divListItemTreatmentWork").find(".elChkSurfaces .toothSurface");
    var arrSurfaces = [];
    var sSurfaces = "";
    for (var j = 0; j < arrElAllSurfaces.length; j++) {
        if ($(arrElAllSurfaces[j]).is(":checked")) {
            arrSurfaces.push($(arrElAllSurfaces[j]).attr("bitValue"));
        }
    }
    if (arrSurfaces.length != 0) {
        sSurfaces = arrSurfaces.join(",");
    }

    var arrSelectedTeeth = elToothSurface.closest(".divListItemTreatmentWork").find(".divTeethStructure_Advice label.active");
    for (var i = 0; i < arrSelectedTeeth.length; i++) {
        $(arrSelectedTeeth[i]).attr("addedsurfaces", sSurfaces);
    }
});

// attachments
$("#btnViewDialogToSelectAttachmentType").click(function () {
    $($("#dlgTypeOfAttachmentBody").find("input[type='radio']")[0]).prop("checked", "checked");
    $("#txtAttachmentNote").val("");
    $("#dlgSelectTypeOfAttachment").modal("show");
});
$("#btnSaveAttachments").click(function () {
    var attachments = $("#attachmentForPatient")[0].files[0];

    if (attachments) {
        var sTypeFile = $("#dlgTypeOfAttachmentBody").find("input[type='radio']:checked").val();
        var txtAttachmentNote = $("#txtAttachmentNote").val();
        var bitAttachment;
        switch (sTypeFile) {
            case "xray":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_XRAY;
                break;

            case "photograph":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_CLINICAL_PHOTOGRAPH;
                break;

            case "consent":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_CONSENT_FROM_PHYSICIAN;
                break;

            case "prescription":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_EARLIER_PRESCRIPTION;
                break;

            case "refnotes":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_REFERENCE_NOTE;
                break;

            case "other":
                bitAttachment = T32App.T32LIB.Utility.ATTACHMENT_BITS.BIT_OTHER;
                break;
        }
        fileDetails.cfnSaveFile(attachments, User.sSession, User.suid, function (fileInfo) {
            var suidFile = fileInfo.sBlobId;
            var skvp = SConcatWithSuitebleDelim([suidFile, bitAttachment, txtAttachmentNote]);
            var arrSkvps = [];
            arrSkvps.push(skvp);

            var skvpAttachments = SConcatWithSuitebleDelim(arrSkvps);
            attachmentDetails.CfnAddAttachment(User.sSession, User.suid, Patient.suid, skvpAttachments, function (result) {
                if (result._jResponseCode == 0) {
                    T32App.Utility.MasterDataAlert("File Uploaded Successfully", "success", 4000);
                    var arrAttachments = result._objResponse._arrAttachments;
                    ViewAttachmentForPatient(arrAttachments);
                    $("#dlgSelectTypeOfAttachment").modal("hide");
                }
                else {
                    T32App.Utility.MasterDataAlert("Something went wrong. Please try again", "danger", 4000);
                    $("#dlgSelectTypeOfAttachment").modal("hide");
                }
            });
        })
    }
    else {
        $("#dlgSelectTypeOfAttachment").modal("hide");
        T32App.Utility.MasterDataAlert("Please select attachment", "danger", 4000);
    }
});
$("#selAttachment").change(function () {
    var jAttachmentTypeBits = $(this).val();
    var arrAttachments = JSON.parse(localStorageDetails.GetItem("_arrAttachments"));
    ViewAttachmentForPatient(arrAttachments, jAttachmentTypeBits);
});
function GetAttachments() {
    attachmentDetails.CfnGetAttachments(User.sSession, User.suid, Patient.suid, function (result) {
        if (result._objResponse == 1) {
            localStorageDetails.SetItem("_arrAttachments", null);
            ViewAttachmentForPatient([]);
        }
        else {
            var arrAttachments = result._objResponse._arrAttachments;
            localStorageDetails.SetItem("_arrAttachments", JSON.stringify(arrAttachments));
            ViewAttachmentForPatient(arrAttachments);
        }
    });
}
function ViewAttachmentForPatient(arrAttachments, jAttachmentTypeBits) {
    arrAttachments != undefined || null ? arrAttachments : [];
    var elTable = $('<table class="table" id="tblPatientsAttachments"></table>');
    var elHead = $('<thead></thead>');


    if (jAttachmentTypeBits != undefined) {
        arrAttachments = arrAttachments.filter(function (attachment) {
            return attachment._jAttachmentTypeBits == jAttachmentTypeBits;
        });
    }

    var elBody = $("<tbody class='files'></tbody>");
    for (var i = 0; i < arrAttachments.length; i++) {
        var attachmentSuid = arrAttachments[i]._suid;
        var jAttachmentTypeBits = arrAttachments[i]._jAttachmentTypeBits;
        var sAttachmentBlobId = arrAttachments[i]._sAttachmentBlobId;
        var sNote = arrAttachments[i]._sNote;
        var sAttachmentURL = arrAttachments[i]._sAttachmentURL;
        var sDate = arrAttachments[i]._sDate;

        var elTr = $('<tr class="template-download fade in"></tr>');
        var elTdImg = $('<td>\
                            <span class="preview" suidAttachment="' + attachmentSuid + '">\
                                <a href="' + sAttachmentURL + '"  title="w1.jpg" download="' + sAttachmentURL + '" data-gallery="">\
                                    <img src="' + sAttachmentURL + '" style="height:40px;width:45px">\
                                </a>\
                            </span>\
                        </td>');
        var elTdDate = $('<td>\
                            <span>'+ sDate + '</span>\
                        </td>');
        var elTdNote = $('<td>\
                            <span>' + sNote != "" ? sNote : "-" + '</span>\
                        </td>');
        var elTdDelete = $('<td>\
                            <button class="btn btn-sm btn-danger">\
                                <i class="icon-trash4"></i>\
                                <span>Delete</span>\
                            </button>\
                          </td>').click(function () {
                              var suidAttachment = $(this).closest("tr").find("span.preview").attr("suidAttachment");
                              attachmentDetails.CfnDeleteAttachment(User.sSession, User.suid, Patient.suid, suidAttachment, function (result) {
                                  if (result._jResponseCode == 0) {
                                      GetAttachments();
                                  }
                              })
                          });
        elTr.append(elTdImg).append(elTdDate).append(elTdNote).append(elTdDelete);
        elTr.appendTo(elBody);
    }

    if (arrAttachments.length == 0) {
        $("#divTblAttachments").html("<div class='mt-2'><span class='' style='color:#ccc;font-size:40px'>Nothing to show. Please upload a file.</span></div>");
    }
    else {
        $("#divTblAttachments").html("").append(elTable.append(elBody));
    }

}

// Utilities
function fillDoctorComboFromArray(arr, sDropdown) {
    $("#" + sDropdown).empty();

    var sEntity = JSON.parse($("#cmbEntityRole").val());
    var suidEntity = sEntity._suidEntity;

    var nBitsEntityType = sEntity._nBitsEntityType;

    //TODO:To remove in regular version ie not demo
    if (nBitsEntityType == T32App.T32LIB.Utility.ENTITYTYPE.BIT_SYSADMIN) {
        $("#" + sDropdown).prop("disabled", false);
    }
    else {
        $("#" + sDropdown).prop("disabled", true);
    }

    if (arr != null) {
        $.each(arr, function (jIndex, oValue) {
            if (jIndex == 0) {
                //$("#" + sDropdown).append($("<option/>").attr({ value: "" }).text("-SELECT DOCTOR-").attr("selected", "selected").attr("disabled", "disabled"));
                $("#" + sDropdown).append($("<option/>").attr({ value: "" }).text("-SELECT DOCTOR-").attr("disabled", "disabled"));
                $("#" + sDropdown).append($("<option/>").attr({ value: oValue._suid, selected: suidEntity == oValue._suid ? true : false }).text("Dr. " + oValue._sNameFirst + " " + oValue._sNameLast));
            }
            else {
                $("#" + sDropdown).append($("<option/>").attr({ value: oValue._suid, selected: suidEntity == oValue._suid ? true : false }).text("Dr. " + oValue._sNameFirst + " " + oValue._sNameLast));
            }
        });
    }
}
function fillDoctorComboFromArrayMultiSelect(arr, sDropdown) {
    $("#" + sDropdown).empty();

    var sEntity = JSON.parse($("#cmbEntityRole").val());
    var suidEntity = sEntity._suidEntity;

    var nBitsEntityType = sEntity._nBitsEntityType;

    //TODO:To remove in regular version ie not demo
    if (nBitsEntityType == T32App.T32LIB.Utility.ENTITYTYPE.BIT_SYSADMIN) {
        $("#" + sDropdown).prop("disabled", false);
    }
    else {
        $("#" + sDropdown).prop("disabled", true);
    }

    if (arr != null) {
        $.each(arr, function (jIndex, oValue) {
            if (jIndex == 0) {
                //$("#" + sDropdown).append($("<option/>").attr({ value: "" }).text("-SELECT DOCTOR-").attr("selected", "selected").attr("disabled", "disabled"));
                //$("#" + sDropdown).append($("<option/>").attr({ value: "" }).text("-SELECT DOCTOR-").attr("disabled", "disabled"));
                $("#" + sDropdown).append($("<option/>").attr({ value: oValue._suid, selected: suidEntity == oValue._suid ? true : false }).text("Dr. " + oValue._sNameFirst + " " + oValue._sNameLast));
            }
            else {
                $("#" + sDropdown).append($("<option/>").attr({ value: oValue._suid, selected: suidEntity == oValue._suid ? true : false }).text("Dr. " + oValue._sNameFirst + " " + oValue._sNameLast));
            }
        });
    }
}
function fillDropdownFromJobTypeEnum(arr, sDropdown, jSelectIndex) {
    $("#" + sDropdown).empty();
    if (jSelectIndex == "") {
        $("#" + sDropdown).append($("<option />").attr({ value: "", selected: "selected" }).text("-- Select Job Type --"));
    }
    else {
        $("#" + sDropdown).append($("<option />").attr({ value: "", selected: "selected" }).text("-- Select Job Type --"));
    }
    if (arr != null) {
        $.each(arr, function (jIndex, oValue) {
            var sText = "";

            if (jIndex == "BIT_FPD") {
                sText = "FPD";
                if (jSelectIndex == oValue) {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue, selected: "selected" }).text(sText));
                }
                else {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue }).text(sText));
                }
            }
            else if (jIndex == "BIT_RPD") {
                sText = "RPD";
                if (jSelectIndex == oValue) {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue, selected: "selected" }).text(sText));
                }
                else {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue }).text(sText));
                }
            }
            else if (jIndex == "BIT_CD") {
                sText = "CD";
                if (jSelectIndex == oValue) {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue, selected: "selected" }).text(sText));
                }
                else {
                    $("#" + sDropdown).append($("<option />").attr({ value: oValue }).text(sText));
                }
            }
        });
    }
}
function fillLabCombo(arr, sDropdown) {
    $("#" + sDropdown).empty();
    $("#" + sDropdown).append($("<option/>").attr("value", "").text("-- Select Lab --"));
    if (arr != null) {
        $.each(arr, function (jIndex, oValue) {
            $("#" + sDropdown).append($("<option/>").attr("value", oValue._suid).text(oValue._sLabName));
        });
    }
}
function fillDropdownFromArray(arr, sDropdown) {
    $("#" + sDropdown).empty();
    if (arr != null) {
        $.each(arr, function (jIndex, oValue) {
            if (jIndex == 0) {
                $("#" + sDropdown).append($("<option />").attr({ value: oValue._suid }).text(oValue._sName));
            }
            else {
                $("#" + sDropdown).append($("<option/>").attr({ value: oValue._suid }).text(oValue._sName));
            }
        });
    }
}
function GetGraphicalRepresentationOfTeethForTreatment(sArrTeeth, jAge) {
    //var  = sSelectedTeeth;
    var arrTeeth = sArrTeeth;
    var sTeeth = "";
    var sUR = "";
    var sUL = "";
    var sLR = "";
    var sLL = "";

    if (jAge == "") {

        var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
        var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);

        var dtBirth = kvps[6].sValue;
        var diff = [];


        if (arrEntity != undefined) {
            var dtToday = new Date();
            var dtDOB = new Date(dtBirth.replace(/-/g, " "));
            diff = datediff(dtToday, dtDOB);
        }

        jAge = diff[0];
    }
    var arrTeethAll = [];
    if (jAge < 6) {
        arrTeethAll = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        for (var i = 0; i < arrTeeth.length; i++) {
            //Upper right  
            for (var j = 0; j <= 4; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUR = sUR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Upper left  
            for (var j = 5; j <= 9; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUL = sUL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }

            //Lower right
            for (var j = 10; j <= 14; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLR = sLR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Lower left  
            for (var j = 15; j <= 19; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLL = sLL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
        }
    }
    else if (jAge > 12) {
        arrTeethAll = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        for (var i = 0; i < arrTeeth.length; i++) {
            //Upper right  
            for (var j = 0; j <= 7; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUR = sUR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Upper left  
            for (var j = 8; j <= 15; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUL = sUL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }

            //Lower right
            for (var j = 16; j <= 23; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLR = sLR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Lower left  
            for (var j = 24; j <= 31; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLL = sLL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
        }
    }
    else {
        arrTeethAll = JSON.parse(localStorageDetails.GetItem("_arrTeethAll"));
        for (var i = 0; i < arrTeeth.length; i++) {
            //Upper right  
            for (var j = 0; j <= 12; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUR = sUR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Upper left  
            for (var j = 13; j <= 25; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sUL = sUL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }

            //Lower right
            for (var j = 26; j <= 38; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLR = sLR + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
            //Lower left  
            for (var j = 39; j <= 51; j++) {
                if (arrTeeth[i] == arrTeethAll[j]._suidTeeth) {
                    sLL = sLL + arrTeethAll[j]._sNotation + " ";
                    break;
                }
            }
        }
    }
    var sTbl = '<div class="col-md-12" style="padding:0; border-bottom:1px solid;">\
						<div class="col-md-5" style="height: 20px; padding-left:0; border-right:1px solid; text-align:right;font-size:11px;">' + sUR + '</div>\
						<div class="col-md-5" style="height: 20px; padding-left:2px; text-align:left;font-size:11px;">' + sUL + '</div>\
					</div>\
					<div class="col-md-12" style="padding:0;">\
						<div class="col-md-5" style="height: 20px; padding-left:0; border-right:1px solid; text-align:right;font-size:11px;">' + sLR + '</div>\
						<div class="col-md-5" style="height: 20px; padding-left:2px; text-align:left;font-size:11px;">' + sLL + '</div>\
					</div>';
    return sTbl;
}

// from PatientHistory and Patient Treatments to avoid changes in original
function TeethSelectionStructureForDentalHist() {
    var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
    var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);
    var dtBirth = kvps[6].sValue;
    var diff = [];


    if (arrEntity != undefined) {
        var dtToday = new Date();
        var dtDOB = new Date(dtBirth.replace(/-/g, " "));
        diff = datediff(dtToday, dtDOB);
    }
    $("#chkCheckAllTeeth").prop("checked", false);
    var jAge = diff[0];
    if (jAge < 6) {
        var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        CreateTeethStructureKids(arrChildTeeth, fShowImage, "#teethStructurePatient");
    }
    else if (jAge > 12) {
        var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        CreateTeethStructureAdult(arrAdultTeeth, fShowImage, "#teethStructurePatient");
    }
    else {
        var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        CreateTeethStructureMixDentition(arrAdultTeeth, arrChildTeeth, fShowImage, "#teethStructurePatient");
    }
}
function ViewMedicalHistoryTimeline() {
    var arrMedicalHistory = Patient.oMedicalHistory;
    //$("#timeline").html("");
    $("#timeline .timelineBody").html("");
    if (arrMedicalHistory != null) {
        for (var j = 0; j < arrMedicalHistory.length; j++) {
            var oPatientHistory = {
                sDtMedicalHistory: arrMedicalHistory[j]._sDtMedicalHistory,
                sBloodDisorder: arrMedicalHistory[j]._sBloodDisorder != "" ? arrMedicalHistory[j]._sBloodDisorder : ' -',
                sCardiacStatus: arrMedicalHistory[j]._sCardiacStatus != "" ? arrMedicalHistory[j]._sCardiacStatus : ' -',
                sDiseases: arrMedicalHistory[j]._sDiseases != "" ? arrMedicalHistory[j]._sDiseases : ' -',
                sDrugsAllergy: arrMedicalHistory[j]._sDrugsAllergy != "" ? arrMedicalHistory[j]._sDrugsAllergy : ' -',
            }

            var elHistory = '<table class="table table-borderless mb-0 history-timeline">\
							<tbody>\
							  <tr>\
								<td style="width:150px"><strong style="font-weight:500">BloodDisorder</strong></td>\
								<td>' + oPatientHistory.sBloodDisorder + '</td>\
							  </tr>\
							  <tr>\
								<td style="width:150px"><strong style="font-weight:500">Diseases</strong></td>\
								<td>' + oPatientHistory.sDiseases + '</td>\
							  </tr>\
							  <tr>\
								<td style="width:150px"><strong style="font-weight:500">Cardiac Status</strong></td>\
								<td>' + oPatientHistory.sCardiacStatus + '</td>\
							  </tr>\
							  <tr>\
								<td style="width:"50px"><strong style="font-weight:500">DrugAllergy</strong></td>\
								<td>' + oPatientHistory.sDrugsAllergy + '</td>\
							  </tr>\
							</tbody>\
					  </table>'
            //<i \class="icon-file-add"></i>
            var elItemContainer = '<li class="timeline-item">\
									<div class="timeline-badge">\
										<span class="bg-teal bg-lighten-1" data-toggle="tooltip" data-placement="right" title="" data-original-title="Portfolio project work" style="font-size:10px;padding-top:10px !important">' + oPatientHistory.sDtMedicalHistory.replace(/-/g, " ") + '</span>\
									</div>\
									<div class="timeline-card card border-grey border-lighten-2">\
										<div class="card-body collapse in">\
											<div class="card-block p-0">\
												<div class="row" id="divMedicalHistDetails">\
													' + elHistory + '\
												</div>\
											</div>\
										</div>\
									</div>\
								</li>';
            $("#timeline .timelineBody").append('<li class="timeline-line"></li>');
            $("#timeline .timelineBody").append(elItemContainer);

        }
    }
    else {
        $("#timeline").html("<div class='mt-2'><span style='color:#ccc;font-size:25px'>No Medical History Added</span></div>");
    }
}
function TeethSelectionStructure() {

    var arrPrerequisiteData = JSON.parse(window.localStorage.getItem("PrerequisiteData"));
    var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
    var dAmount = 0;
    $("#divTreatmentCodes").html("");
    for (var i = 0; i < arrTreatmentMaster.length; i++) {
        dAmount = arrTreatmentMaster[i]._initialTreatmentCost._dAmount;
        if (arrTreatmentMaster[i]._fOther == false) {
            $chkTreatment = $("<div class='col-md-2'><input id='" + arrTreatmentMaster[i]._suid + "' type='checkbox' value='" + arrTreatmentMaster[i]._sShortCode + "' price='" + dAmount + "' name='" + arrTreatmentMaster[i]._sName + "' isTeethSelectionNotRequired=" + arrTreatmentMaster[i]._fTeethSelection + " >&nbsp;<label for='" + arrTreatmentMaster[i]._suid + "' title='" + arrTreatmentMaster[i]._sName.trim() + "'>" + arrTreatmentMaster[i]._sShortCode + "</label></div>");
            $("#divTreatmentCodes").append($chkTreatment);
        }
    }

    var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
    var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);
    var dtBirth = kvps[6].sValue;//codeChange
    var diff = [];


    if (arrEntity != undefined) {
        var dtToday = new Date();
        var dtDOB = new Date(dtBirth.replace(/-/g, " "));
        diff = datediff(dtToday, dtDOB);
    }
    //$("#chkCheckAllTeethInTreatment").prop("checked", false);
    var jAge = diff[0];
    if (jAge < 6) {
        var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        CreateTeethStructureKids(arrChildTeeth, fShowImage, "#divTreatmentAdvice");
    }
    else if (jAge > 12) {
        var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        CreateTeethStructureAdult(arrAdultTeeth, fShowImage, "#divTreatmentAdvice");
    }
    else {
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        var arrAdultTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        var arrChildTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        CreateTeethStructureMixDentition(arrAdultTeeth, arrChildTeeth, fShowImage, "#divTreatmentAdvice");
    }

}

function TeethSelectionStructureForCurrentTreatment(dtTreatment) {
    $("#divCurrentTreatmentTeeth").html("");
    $tbl = $("<table class='col-md-12'></table>");
    $tblBody = $("<tbody></tbody>");
    var arrPrerequisiteData = JSON.parse(window.localStorage.getItem("PrerequisiteData"));
    var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
    var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
    var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);
    var dtBirth = kvps[6].sValue;
    var diff = [];
    if (arrEntity != undefined) {
        var dtToday = new Date();
        var dtDOB = new Date(dtBirth.replace(/-/g, " "));
        var dtThisTreatment = new Date(dtTreatment.replace(/-/g, " "));
        diff = datediff(dtThisTreatment, dtDOB);
    }
    var jAge = diff[0];
    if (Patient.jAge < 6) {
        var arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethChild"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));
        $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");

        for (var i = 0; i <= 9; i++) {
            if (i == 4) {
                $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;'></td>");
            }
            else {
                $td = $("<td style='border-bottom:solid black 1px;height:auto;'></td>");
            }


            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }

            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trUpper.append($td);
        }
        $tblBody.append($trUpper).append("<br/>");


        $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
        for (var i = 10; i <= 19; i++) {
            if (i == 14) {
                $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
            }
            else {
                $td = $("<td style='height:auto;'></td>");
            }

            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }

            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trLower.append($td);
        }
        $tblBody.append($trLower);
    }
    else if (Patient.jAge > 12) {
        var arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAdult"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));

        $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");

        for (var i = 0; i <= 15; i++) {
            if (i == 7) {
                $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
            }
            else {
                $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
            }
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);

            $trUpper.append($td);
        }
        $tblBody.append($trUpper).append("<br/>");


        $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
        for (var i = 16; i <= 31; i++) {
            if (i == 23) {
                $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
            }
            else {
                $td = $("<td style='height:auto;'></td>");
            }

            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
            }

            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trLower.append($td);
        }
        $tblBody.append($trLower);
        // $tbl.append($tblBody);
    }
    else {
        arrTeeth = JSON.parse(localStorageDetails.GetItem("_arrTeethAll"));
        var fShowImage = JSON.parse(localStorageDetails.GetItem("fShowImages"));

        $trUpper = $("<tr class='btn-group' data-toggle='buttons'></tr>");
        for (var i = 0; i <= 1; i++) {
            $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })
            $td.append($btn);

            $trUpper.append($td);
        }
        for (var i = 2; i <= 23; i++) {
            if (i == 12) {
                $td = $("<td style='border-bottom:solid black 1px;border-right:solid black 1px;height:auto;' class='showPopup'></td>");
            }
            else {
                $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
            }
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }
            if ((i != 2 && i != 23) && i % 2 != 0) {
                $($td).attr("hidden", true);
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);

            $trUpper.append($td);
        }
        for (var i = 24; i <= 25; i++) {
            $td = $("<td style='border-bottom:solid black 1px;height:auto;' class='showPopup'></td>");
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /><br />" + arrTeeth[i]._sNotation + "</label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default teeth' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "</label>");
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })
            $td.append($btn);

            $trUpper.append($td);
        }
        $tblBody.append($trUpper).append("<br/>");


        $trLower = $("<tr class='btn-group' data-toggle='buttons'></tr>");
        for (var i = 26; i <= 27; i++) {
            $td = $("<td style='height:auto;'></td>");
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trLower.append($td);
        }
        for (var i = 28; i <= 49; i++) {
            if (i == 38) {
                $td = $("<td style='border-right:solid black 1px;height:auto;'></td>");
            }
            else {
                $td = $("<td style='height:auto;'></td>");
            }

            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
            }
            if ((i != 28 && i != 49) && i % 2 != 0) {
                $($td).attr("hidden", true);
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trLower.append($td);
        }
        for (var i = 50; i <= 51; i++) {
            $td = $("<td style='height:auto;'></td>");
            if (fShowImage == true || fShowImage == "true") {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:auto;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;border:none;' treats=''>" + arrTeeth[i]._sNotation + "<br /><img src='" + arrTeeth[i]._sPath + "' width=30 height=40 /></label>");
            }
            else {
                $btn = $("<label id='currentTreatmentTooth" + (i + 1) + "' toothSuids='" + arrTeeth[i]._suidTeeth + "' position='" + arrTeeth[i]._jPosition + "' class='btn btn-default' style='width:30px;padding-left: 0px;padding-right: 0px;height:auto;font-size:12px;' treats=''>" + arrTeeth[i]._sNotation + "<div class='tooltipcontainer'><div class='tooltip'>Here some info</div></div></label>");
            }
            $btn.click(function () {
                AddTreatmentRecordDetails($("#" + $(this)[0].id).attr("toothSuids"), $("#" + $(this)[0].id).attr("surfaces"));
            })

            $td.append($btn);
            $trLower.append($td);
        }
        $tblBody.append($trLower);
    }

    $tbl.append($tblBody);
    $divHeading = $("<div style='border:none; text-align:center;'><strong>Teeth:</strong></div>");

    $spanHiddenThings = $("<span suidTreatmentWork='' suidDoctor='' suidTreatment='' sTeeth='' hidden></span>")

    $divPaymentDetails = $("<div class='col-md-12' style='padding-top:8px;'></div>");
    $labelEstimate = $("<label class='alert-info'>Estimate(<span class='fa fa-inr'></span>): </label><label class='estimate alert-info'>0</label>");
    $labelBillAmount = $("<label class='alert-success' style='margin-left:8px;'>Bill Amount(<span class='fa fa-inr'></span>): </label><label class='billAmount alert-success'>0</label>");
    $labelBalance = $("<label class='alert-danger' style='margin-left:8px;'>Balance(<span class='fa fa-inr'></span>): </label><label class='balance alert-danger'>0</label>");
    $divPaymentDetails.append($labelEstimate).append($labelBillAmount).append($labelBalance);

    //$("#divCurrentTreatmentTeeth").append($divHeading).append($spanHiddenThings).append($tbl).append($divPaymentDetails); //@Test
    $("#divCurrentTreatmentTeeth").append($spanHiddenThings).append($tbl)
}
function ShowTeethSurfaceList(arrOLabel) {
    var div = arrOLabel.closest("div");
    if (div[0].id == "divTreatmentAdvice") {
        var sSurface = arrOLabel.attr("surfaces");
        FillSurfaceList(sSurface);
        var divTreatmentAdviceHeight = $("#divTreatmentAdvice").height();
        var divTeethSurfaceListHeight = $("#divTeethSurfaceList").height();
        if (divTeethSurfaceListHeight < divTreatmentAdviceHeight) {
            $("#divTeethSurfaceList").height(divTreatmentAdviceHeight);
        }
        else {
            $("#divTreatmentAdvice").height(divTeethSurfaceListHeight);
        }
        $("#divTreatmentAdvice").removeClass("col-md-12");
        $("#divTreatmentAdvice").addClass("col-md-9");
        $("#divTeethSurfaceList").show();
    }
}

function ShowAdviceTreatments(sOther) {
    $("#divTreatmentCodes").html("");
    var arrPrerequisiteData = JSON.parse(window.localStorage.getItem("PrerequisiteData"));
    var arrTreatmentMaster = arrPrerequisiteData._arrTreatmentMaster;
    var dAmount = 0;

    for (var i = 0; i < arrTreatmentMaster.length; i++) {
        dAmount = arrTreatmentMaster[i]._initialTreatmentCost._dAmount;
        if (sOther == "false") {
            if (arrTreatmentMaster[i]._fOther == false) {
                $chkTreatment = $("<div class='col-md-2'><input id='" + arrTreatmentMaster[i]._suid + "' type='checkbox' value='" + arrTreatmentMaster[i]._sShortCode + "' price='" + dAmount + "' name='" + arrTreatmentMaster[i]._sName + "' isTeethSelectionNotRequired=" + arrTreatmentMaster[i]._fTeethSelection + " >&nbsp;<label for='" + arrTreatmentMaster[i]._suid + "' title='" + arrTreatmentMaster[i]._sName.trim() + "'>" + arrTreatmentMaster[i]._sShortCode + "</label></div>");
                $("#divTreatmentCodes").append($chkTreatment);
            }
        }
        else if (sOther == "true") {
            if (arrTreatmentMaster[i]._fOther == true) {
                $chkTreatment = $("<div class='col-md-2'><input id='" + arrTreatmentMaster[i]._suid + "' type='checkbox' value='" + arrTreatmentMaster[i]._sShortCode + "' price='" + dAmount + "' name='" + arrTreatmentMaster[i]._sName + "' isTeethSelectionNotRequired=" + arrTreatmentMaster[i]._fTeethSelection + ">&nbsp;<label for='" + arrTreatmentMaster[i]._suid + "' title='" + arrTreatmentMaster[i]._sName.trim() + "'>" + arrTreatmentMaster[i]._sShortCode + "</label></div>");
                $("#divTreatmentCodes").append($chkTreatment);
            }
        }
        else if (sOther == "all") {
            $chkTreatment = $("<div class='col-md-2'><input id='" + arrTreatmentMaster[i]._suid + "' type='checkbox' value='" + arrTreatmentMaster[i]._sShortCode + "' price='" + dAmount + "' name='" + arrTreatmentMaster[i]._sName + "' isTeethSelectionNotRequired=" + arrTreatmentMaster[i]._fTeethSelection + ">&nbsp;<label for='" + arrTreatmentMaster[i]._suid + "' title='" + arrTreatmentMaster[i]._sName.trim() + "'>" + arrTreatmentMaster[i]._sShortCode + "</label></div>");
            $("#divTreatmentCodes").append($chkTreatment);
        }

    }
}

// ================ Checkboxes Added to select Teeth Group: All, UL, UR, LL, LR ================== 
function SelectTeethGroup(oDiv, oChkBox, startInd, endInd) {
    if (oChkBox.prop('checked') == true) {
        $tblArrCells = oDiv.find("label");
        for (var j = 0; j < $tblArrCells.length; j++) {
            if ((j >= startInd && j <= endInd)) {
                $label = $tblArrCells[j];
                $id = $label.id;
                $("#" + $id).addClass("active");
            }
        }
    }
    else {
        $tblArrCells = oDiv.find("label");
        for (var j = 0; j < $tblArrCells.length; j++) {
            if ((j >= startInd && j <= endInd)) {
                $label = $tblArrCells[j];
                $id = $label.id;
                $("#" + $id).removeClass("active");
            }
        }
    }

    SelectAllForAdvice();
    SelectAllForDentHist();
}

// REGION: TEETH STRUCTURE IN ADD ADVICE 
function IsAdultOrKid() {
    const KID = 0;
    const ADULT = 1;
    var arrEntity = JSON.parse(localStorageDetails.GetItem("ActivePatient"));
    var kvps = SUnconcatDelimited(arrEntity._sDelimitedInfoKVPs);
    var dtBirth = kvps[6].sValue;
    var diff = [];
    if (arrEntity != undefined) {
        var dtToday = new Date();
        var dtDOB = new Date(dtBirth.replace(/-/g, " "));
        diff = datediff(dtToday, dtDOB);
    }
    var jAge = diff[0];
    if (jAge < 6) {
        return 0; // 0 => KID
    }
    else if (jAge > 12) {
        return 1; // 1 => ADULT
    }
    else {
        return 2;
    }
}
function FillSurfaceList(sSurfaces) {
    var arrSurfaces = sSurfaces.split(',');
    $("#surfaceList").html("");
    var lib = JSON.parse(window.localStorage.getItem("T32LIB"));
    for (var i = 0; i < arrSurfaces.length; i++) {
        var bit = arrSurfaces[i];
        var sSurfaceName = "";
        if (bit == lib.Utility.TEETHSURFACE.BIT_INCISAL) {
            sSurfaceName = "Incisal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_OCCLUSAL) {
            sSurfaceName = "Occusal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_MESIAL) {
            sSurfaceName = "Mesial";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_DISTAL) {
            sSurfaceName = "Distal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_BUCCAL) {
            sSurfaceName = "Buccal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_LABIAL) {
            sSurfaceName = "Labial";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_PALATAL) {
            sSurfaceName = "Palatal";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_LINGUAL) {
            sSurfaceName = "Lingual";
        }
        else if (bit == lib.Utility.TEETHSURFACE.BIT_CERVICAL) {
            sSurfaceName = "Cervical";
        }
        $chkSurface = "<label class='checkbox-inline'><input type='checkbox' name='chkSurfaces' bitValue='" + bit + "' />" + sSurfaceName + "</label>";
        $("#surfaceList").append($chkSurface);
    }
}

function ShowTeethSurfaceList(arrOLabel) {
    var div = arrOLabel.closest("div");
    if (div[0].id == "divTreatmentAdvice") {
        var sSurface = arrOLabel.attr("surfaces");
        FillSurfaceList(sSurface);
        var divTreatmentAdviceHeight = $("#divTreatmentAdvice").height();
        var divTeethSurfaceListHeight = $("#divTeethSurfaceList").height();
        if (divTeethSurfaceListHeight < divTreatmentAdviceHeight) {
            $("#divTeethSurfaceList").height(divTreatmentAdviceHeight);
        }
        else {
            $("#divTreatmentAdvice").height(divTeethSurfaceListHeight);
        }
        $("#divTreatmentAdvice").removeClass("col-md-12");
        $("#divTreatmentAdvice").addClass("col-md-9");
        $("#divTeethSurfaceList").show();
    }
}
function SelectULURLLLRCheckboxFromAdvice(fCheck) {

    $("#chkULTeethGroup").prop('checked', fCheck);
    $("#chkURTeethGroup").prop('checked', fCheck);
    $("#chkLLTeethGroup").prop('checked', fCheck);
    $("#chkLRTeethGroup").prop('checked', fCheck);

}

// Check 'All' if UL,UR,LL,LR checked & Deselect if one of UL,Ur,LL,LR unchecked
function SelectAllForAdvice() {
    var oChkUL = $("#chkULTeethGroup");
    var oChkUR = $("#chkURTeethGroup");
    var oChkLL = $("#chkLLTeethGroup");
    var oChkLR = $("#chkLRTeethGroup");
    if (oChkUL.is(":checked") && oChkUR.is(":checked") && oChkLL.is(":checked") && oChkLR.is(":checked")) {
        $("#chkAllTeethGroup").prop("checked", true);
    }
    else {
        $("#chkAllTeethGroup").prop("checked", false);
    }
}
function HideSurfaceList() {
    $("#divTreatmentAdvice").removeClass("col-md-9");
    $("#divTreatmentAdvice").addClass("col-md-12");
    $("#divTeethSurfaceList").hide();
}

$(document).on("click", "#chkAllTeethGroup", function () {
    $(this).is(":checked") ? SelectULURLLLRCheckboxFromAdvice(true) : SelectULURLLLRCheckboxFromAdvice(false);
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#divTreatmentAdvice"), $(this), 0, 19) :
						  SelectTeethGroup($("#divTreatmentAdvice"), $(this), 0, 31);
    //ShowTeethSurfaceList($("#divTreatmentAdvice").find('label'));
    HideSurfaceList();
});
$(document).on("click", "#chkULTeethGroup", function () {
    $("#chkAllTeethGroup").is(":checked") ? $("#chkAllTeethGroup").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#divTreatmentAdvice"), $(this), 0, 4) :
						  SelectTeethGroup($("#divTreatmentAdvice"), $(this), 0, 7);
    //ShowTeethSurfaceList($("#divTreatmentAdvice").find('label'));
    HideSurfaceList();
});
$(document).on("click", "#chkURTeethGroup", function () {
    $("#chkAllTeethGroup").is(":checked") ? $("#chkAllTeethGroup").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#divTreatmentAdvice"), $(this), 5, 9) :
						  SelectTeethGroup($("#divTreatmentAdvice"), $(this), 8, 15);
    //ShowTeethSurfaceList($("#divTreatmentAdvice").find('label'));
    HideSurfaceList();
});
$(document).on("click", "#chkLLTeethGroup", function () {
    $("#chkAllTeethGroup").is(":checked") ? $("#chkAllTeethGroup").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#divTreatmentAdvice"), $(this), 10, 14) :
						  SelectTeethGroup($("#divTreatmentAdvice"), $(this), 16, 23);
    //ShowTeethSurfaceList($("#divTreatmentAdvice").find('label'));
    HideSurfaceList();
});
$(document).on("click", "#chkLRTeethGroup", function () {
    $("#chkAllTeethGroup").is(":checked") ? $("#chkAllTeethGroup").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#divTreatmentAdvice"), $(this), 15, 19) :
						  SelectTeethGroup($("#divTreatmentAdvice"), $(this), 24, 31);
    //ShowTeethSurfaceList($("#divTreatmentAdvice").find('label'));
    HideSurfaceList();
});

// REGION: TEETH STRUCTURE IN DENTAL HISTORY 
function SelectULURLLLRCheckboxFromDentHist(fCheck) {

    $("#chkULTeethGroupDH").prop('checked', fCheck);
    $("#chkURTeethGroupDH").prop('checked', fCheck);
    $("#chkLLTeethGroupDH").prop('checked', fCheck);
    $("#chkLRTeethGroupDH").prop('checked', fCheck);

}

// Check 'All' if UL,UR,LL,LR checked & Deselect if one of UL,Ur,LL,LR unchecked
function SelectAllForDentHist() {
    var oChkUL = $("#chkULTeethGroupDH");
    var oChkUR = $("#chkURTeethGroupDH");
    var oChkLL = $("#chkLLTeethGroupDH");
    var oChkLR = $("#chkLRTeethGroupDH");
    if (oChkUL.is(":checked") && oChkUR.is(":checked") && oChkLL.is(":checked") && oChkLR.is(":checked")) {
        $("#chkAllTeethGroupDH").prop("checked", true);
    }
    else {
        $("#chkAllTeethGroupDH").prop("checked", false);
    }
}

$(document).on("click", "#chkAllTeethGroupDH", function () {
    $(this).is(":checked") ? SelectULURLLLRCheckboxFromDentHist(true) :
							 SelectULURLLLRCheckboxFromDentHist(false);
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#teethStructurePatient"), $(this), 0, 19) :
						  SelectTeethGroup($("#teethStructurePatient"), $(this), 0, 31);
});
$(document).on("click", "#chkULTeethGroupDH", function () {
    $("#chkAllTeethGroupDH").is(":checked") ? $("#chkAllTeethGroupDH").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#teethStructurePatient"), $(this), 0, 4) :
						  SelectTeethGroup($("#teethStructurePatient"), $(this), 0, 7);
});
$(document).on("click", "#chkURTeethGroupDH", function () {
    $("#chkAllTeethGroupDH").is(":checked") ? $("#chkAllTeethGroupDH").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#teethStructurePatient"), $(this), 5, 9) :
						  SelectTeethGroup($("#teethStructurePatient"), $(this), 8, 15);
});
$(document).on("click", "#chkLLTeethGroupDH", function () {
    $("#chkAllTeethGroupDH").is(":checked") ? $("#chkAllTeethGroupDH").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#teethStructurePatient"), $(this), 10, 14) :
						  SelectTeethGroup($("#teethStructurePatient"), $(this), 16, 23);
});
$(document).on("click", "#chkLRTeethGroupDH", function () {
    $("#chkAllTeethGroupDH").is(":checked") ? $("#chkAllTeethGroupDH").prop("checked", false) : function () { };
    IsAdultOrKid() == 0 ? SelectTeethGroup($("#teethStructurePatient"), $(this), 15, 19) :
						  SelectTeethGroup($("#teethStructurePatient"), $(this), 24, 31);
});
